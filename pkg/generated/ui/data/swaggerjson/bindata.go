// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x5f\x6f\xdb\xb6\xf3\xdd\x9f\xe2\xa0\xdf\x0f\xd8\x4b\x1a\xa7\x7d\x1a\xf2\xb4\x22\x01\x5a\xa3\xcd\x16\xac\x5b\xf3\x30\x14\x01\x4d\x9d\x25\x36\x12\xa9\x92\x27\x67\xde\xe0\xef\x3e\x90\xa2\x2c\x4a\x96\x1c\x5b\x2e\x52\xa3\x68\x5f\xea\x98\xf7\xff\x1f\xef\x8e\xfe\x77\x02\x10\x99\x47\x96\x24\xa8\xa3\x4b\x88\x5e\x9d\x5f\x44\x67\xf6\x3b\x21\x17\x2a\xba\x04\x7b\x0e\x10\x91\xa0\x0c\xed\xf9\x55\x56\x1a\x42\x0d\x37\x4c\xb2\x04\x35\x7c\xbc\xb9\x63\x1a\xe1\x2d\x66\x05\x6a\x78\x7d\x3b\x73\xd8\x00\xd1\x12\xb5\x11\x4a\x5a\x9c\xe5\xc5\xf9\x4b\x4f\x16\x20\xe2\x4a\x12\xe3\xb4\xa1\x0d\x10\x49\x96\x3b\xe2\x37\x82\xa7\x0c\x33\xf8\x88\x12\xff\x11\xcc\x63\x00\x44\xa5\xce\xec\x79\x4a\x54\x98\xcb\xe9\x34\x11\x94\xb1\xf9\x39\x57\xf9\x34\x5f\x56\xb0\x53\x9e\xb3\x17\xcb\xfc\x91\x69\x6c\xd0\x30\x67\xc2\x21\xd6\x50\xbf\x24\xf6\x1b\x8b\x18\x39\x98\xf5\x04\x60\xed\xd4\x35\x3c\xc5\x1c\x4d\x74\x09\x7f\x55\x62\x3a\x5e\xb5\xcc\xf6\x0f\x8b\xf1\xc9\xc1\x72\x25\x4d\xd9\x02\x66\x45\x91\x09\xce\x48\x28\x39\xfd\x6c\x94\x6c\x60\x0b\xad\xe2\x92\xef\x09\xcb\x28\x35\x8d\xcd\xa7\xac\x10\xd3\xe5\xcb\x29\xaf\x4c\x1e\x1a\x2c\xc1\xd0\x7e\x56\xfc\x32\xcf\x99\x5e\x59\x5d\xef\x44\x96\x81\x46\xd2\x02\x97\x08\x94\x22\x18\x62\x54\x1a\x50\x0b\x60\xe0\x89\x01\x93\x31\x08\x32\xf0\x50\xce\x91\x2b\xb9\x10\x09\x2c\x94\x06\xae\xa4\x44\x4e\x62\x29\x68\xb5\xb1\x23\x40\xa4\x0a\xd4\x4e\xe4\x59\x6c\x79\xbc\x41\xf2\x81\x10\x02\x69\x34\x85\x92\x06\x4d\x4b\x36\x80\xe8\xd5\xc5\x45\xe7\x2b\x80\x28\x46\xc3\xb5\x28\xc8\x07\x49\x40\xa8\xd2\xc8\x3a\x84\x6d\xa1\x01\x44\xff\xd7\xb8\xb0\x18\xff\x9b\xc6\xb8\x10\x52\x58\x0a\xc6\xfa\xbf\x72\x7f\x23\xdb\xef\x58\x64\xab\xa8\x85\xbe\x9e\xf4\x7d\x5e\x07\x4a\x14\x4c\xb3\x1c\x09\x75\xe3\xb2\xea\x5f\x47\xfc\x3a\x66\xdd\xff\x67\x3b\x55\xfb\x95\xe5\x68\xad\x6f\x7d\x51\xdb\x9f\x14\xcc\x11\x32\xa5\x1e\x30\x86\xb2\x38\xef\x92\x10\x0e\xf3\x4b\x89\x7a\xd5\x3d\xd2\xf8\xa5\x14\x1a\xad\x23\x16\x2c\x33\xd8\x39\xa6\x55\xe1\x04\x33\xa4\x85\x4c\x42\xf5\xd7\x67\x4f\xab\xc3\x35\xc6\x28\x49\xb0\xcc\x9c\x97\x06\xf5\x1e\xea\xfd\x91\x22\xfc\xe9\x41\x5d\x10\xbd\xbe\x9d\x01\xe3\x1c\x8d\x39\x49\xb5\x0a\x66\xcc\xa3\xd2\xf1\x1e\x6a\xdd\x7a\xd0\x6f\xa2\xd6\xe6\xf3\xa7\x20\x3c\x89\x25\xdd\xc0\xac\x6b\x72\x83\xfc\x69\xd2\xb1\x4c\x14\x63\x86\x84\xbb\x6b\x46\x05\xd3\xd4\x88\x1d\xf9\x7f\xed\x40\x4f\xb6\x04\xb4\xc4\x3b\x95\x2a\x70\x97\x32\x02\x61\xc2\x2a\xf0\x93\x01\x97\x34\xa4\x20\x46\x43\x5a\xad\x4e\x32\x61\x7e\xd4\x81\xef\xa6\x0e\x14\xe5\x13\x8d\x43\xa1\xd5\x52\xd8\xc6\x6d\xaf\x3a\x70\xa5\x91\x9d\x70\x1d\x68\x89\xf7\x2c\x75\x60\xae\xe2\x2d\xcf\x57\x41\xd1\x77\x12\xc4\x04\xe9\xb2\x1b\x12\x5f\x47\xed\x1b\x93\xec\xa3\xf4\xf8\xd8\x9a\x04\x36\xeb\xf6\xac\xd3\x4c\x18\x1a\xd7\xb8\x32\xb0\xb8\xb6\x6d\xf2\xb4\xcc\x5e\xfd\xe8\x7b\xcb\xf0\xe4\x02\xb1\x2d\xdf\xb3\x44\xe2\x8f\x02\xfe\x3d\x15\xf0\xde\x24\x6b\x46\xec\x83\xf2\xab\xd4\x12\x3c\x2a\xd8\x29\x5f\xe7\x2e\x93\x80\xcd\x55\x49\xc0\x0a\x01\x06\xf5\x72\x67\xdd\x7f\x83\xf4\xb1\xa2\x30\x6b\x08\x9c\x64\xda\x79\x31\x47\xa5\xdc\x18\x17\x6d\x16\x0a\x81\x40\xcd\x48\xdf\x11\xa8\xc7\x86\x81\x2f\xeb\x88\x52\xf3\xcf\xc8\x9b\xa2\x16\x15\xda\x7a\x83\x44\xc7\xb8\x51\x22\xe8\x7e\x3b\x24\xa0\x27\x38\xcf\x5a\x67\xf5\x6a\xc7\xe6\x09\xb1\x04\x94\x74\x3d\x6a\x22\x08\x34\x16\xca\x08\x52\x3a\xb0\x5d\x68\x21\xcb\x92\xab\x3c\x17\x34\x9a\x63\xca\x4c\x5a\x0f\xc7\x96\xa5\x27\x37\xc8\x8e\x34\xe2\xbd\x21\xd6\x99\x66\xf6\x65\x79\x97\x22\xa5\xa8\x41\x69\x90\x8a\x1c\x57\x4b\x11\x1e\x99\x01\x9e\x21\x93\xf0\x98\xa2\x84\x79\x29\xb2\x01\x21\xec\x51\x7c\x1f\x8f\x15\xe0\x9a\x91\x5b\x06\x38\x32\x03\x6a\xaa\xa3\xfc\xe8\xa3\xca\x32\x49\x14\x94\x06\x63\x3b\x60\x70\x95\x17\x22\xc3\x7e\x8e\xfe\x50\x8f\xe2\x77\xe5\x91\x1d\xab\x7e\xfa\x45\xc6\xc8\xc6\xf8\x28\xfa\xb7\x1e\x19\x04\x55\x6e\xaa\xf8\x55\xb5\x7c\x0a\xba\x94\x52\x48\x1b\xb6\x01\xef\xde\xba\xd9\x34\x48\x55\x12\x5f\x23\x31\x91\xcd\x08\xf3\x63\xd2\x4e\xc4\xa3\xb4\x9a\x5d\x77\x56\x42\xfd\x96\xf3\xf7\xde\xe1\xf4\x7b\x96\x4e\xfd\x1c\xaa\xed\xe0\xc8\x64\x6a\x46\xda\x66\xc9\xf8\x24\xc7\x66\xe7\x78\x34\xd7\x60\x7d\xe9\x62\xdc\x6d\x2f\xed\xc7\x7e\x21\xf6\x0a\x8b\x1f\x01\xf1\x2c\x01\xf1\x84\x2f\xba\x33\xcc\x11\x0e\xf9\x9a\x26\xf3\x8b\xdb\xcd\x98\x3c\x58\xf1\x2c\x40\xbc\x5d\x51\x0f\x19\xdd\x6e\x3d\x8d\x0f\x05\xf2\x1d\x37\x68\xcd\x0a\x4c\x81\x5c\x2c\xfc\xdb\xc2\x38\x4b\xb7\x58\x7e\x0b\x93\x87\x11\xb4\x51\xec\x05\x64\xe2\x01\xc1\x3f\xef\xf4\xd7\x94\x9f\xcd\xd1\xcd\xcf\xb2\xb9\x38\xdf\x95\x73\xd4\x12\x09\x4d\x3f\x3b\x2f\xca\x11\xce\xad\x1e\xce\x9e\x70\xad\x7f\x5d\x1b\x72\x6c\x20\x50\x2a\x92\xf4\x9e\x2d\x99\xc8\xd8\x5c\x64\x82\x56\x43\x56\x98\x2b\x65\xdb\x9c\x36\xd3\xaa\xff\x1c\x3c\xde\xd5\x3d\xd5\x79\x21\x0c\xbc\x7d\x3d\x50\xb2\x90\x1e\x95\x7e\xb8\x5f\xb0\xb9\x16\x7c\xb4\x7b\x2a\x74\x9f\x80\x9d\x5e\xe3\x80\x10\xaf\x46\x81\x23\x62\x5b\x3d\x3c\xb7\x6d\x6d\xd7\x13\x54\x1c\x98\xaf\x80\x52\x61\xc0\x8e\xa4\x68\x06\xfa\xd4\xed\x67\xc3\xbd\x62\x34\xb8\x03\x87\x5d\x11\xbb\xce\xa9\x5b\xdc\x6b\x79\xa0\x9e\xfe\xc6\x39\x28\xc8\x8c\x23\xbc\x14\x2c\x0a\x0e\x34\x41\xc5\xff\x2a\xc0\x1f\xe8\x7b\x1b\x08\x17\x94\xb6\xa1\x1f\x75\xd7\xf5\x3c\x57\x9c\x5e\x78\x5e\xa9\xb2\xad\x9e\xcd\x42\xff\x6a\x31\x74\x09\x1e\xd1\x49\x7c\x68\x75\x0f\xdb\x81\xbe\xdb\xa2\x7d\xfb\xb6\xd3\x33\xe9\xcc\xb4\x2b\x68\x35\x77\x9b\x95\xb1\xc9\xb7\x2b\xa7\x07\x4d\xca\xb4\x66\xed\xc5\x55\x24\x08\xf3\x2e\xfc\x61\x65\x20\x40\x5c\xf7\x2b\xf2\xbe\xbb\xa9\x3d\xdc\x4f\xdf\x9d\x8f\xc6\xd5\xdd\x60\x24\x3d\xc0\x86\xad\x25\xd7\x09\xda\x70\x01\x9b\xfd\xa1\xbb\xcb\x7e\x7b\x37\xd0\x55\x55\x7a\xdc\x8b\xde\x85\xd8\x0e\x33\x3e\xbd\x57\xdb\xbd\x2a\x09\x21\xb7\xed\xbe\xb1\xdb\x06\xcf\x71\x71\xfb\x87\xba\x67\x6c\x55\xa8\x2d\x1f\x6d\x5f\x29\x47\x78\x69\xb3\xcd\x1f\xdb\x48\x0d\xec\xf8\x07\x06\x99\x7a\xc9\x3e\x96\xdb\xc0\xea\x7d\x2f\x3b\x5b\x7c\xde\xbe\x66\x4b\x53\xc9\xcd\x6d\xcb\x20\x64\xb2\x7d\xe3\x36\x3b\x58\xfc\x9b\xac\xa6\xd9\xb5\xe2\xc1\x12\xb6\xb3\x6d\xbe\x51\x1a\xfd\xee\x7b\xef\x1f\xb7\x1d\xf6\x7b\x34\x2b\xcf\x64\x3d\xf9\x2f\x00\x00\xff\xff\x3a\x4a\xe7\x6a\x6b\x27\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 10091, mode: os.FileMode(420), modTime: time.Unix(1536723588, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
