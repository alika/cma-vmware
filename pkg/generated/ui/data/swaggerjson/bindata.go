// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x73\xdb\xb8\xf5\x7f\xf7\xa7\x38\xc3\xff\x7f\xa6\x2f\x89\x95\xdd\xbe\x74\xdc\x87\xd6\x63\xbb\x59\xcd\xc6\x97\xb1\x9c\xe4\xa1\xc9\x68\x8e\xc8\x23\x12\x31\x09\x30\xb8\x48\x55\x3b\xfe\xee\x1d\x5c\x68\x91\x14\xa9\x6b\xbc\x51\x76\xbb\x2f\x1b\x13\xc0\xc1\xb9\xfc\x70\x6e\x80\xfe\x73\x02\x10\xa9\x39\xa6\x29\xc9\xe8\x0c\xa2\x9f\x4f\xdf\x44\xaf\xec\x37\xc6\xa7\x22\x3a\x03\x3b\x0e\x10\x69\xa6\x73\xb2\xe3\x17\xb9\x51\x9a\x24\x5c\x23\xc7\x94\x24\x7c\xb8\xfe\x88\x92\xe0\x17\xca\x4b\x92\x70\x7e\x37\x74\xab\x01\xa2\x19\x49\xc5\x04\xb7\x6b\x66\x6f\x4e\x7f\x0a\x64\x01\xa2\x58\x70\x8d\xb1\x7e\xa6\x0d\x10\x71\x2c\x1c\xf1\x6b\x16\x67\x48\x39\x7c\x20\x4e\xff\x66\x18\x56\x00\x44\x46\xe6\x76\x3c\xd3\xba\x54\x67\x83\x41\xca\x74\x66\x26\xa7\xb1\x28\x06\x0a\x0b\x65\x78\xfa\x3a\xe6\xb1\x1e\xc4\x05\xbe\x9e\x15\x73\x94\xb4\x5c\x4a\x05\x32\xb7\xb8\x98\x79\xaa\x7f\x4f\xed\x17\xbb\x38\x72\x73\x9e\x4e\x00\x9e\x9c\xc8\x2a\xce\xa8\x20\x15\x9d\xc1\x3f\x3d\xab\x6e\xbf\x8a\x6f\xfb\x87\x5d\xf1\xd9\xcd\x8d\x05\x57\xa6\x31\x19\xcb\x32\x67\x31\x6a\x26\xf8\xe0\x8b\x12\x7c\x39\xb7\x94\x22\x31\xf1\x96\x73\x51\x67\x6a\xa9\xf7\x01\x96\x6c\x30\xfb\x69\x10\x7b\xb5\xd7\x95\x96\x52\x5d\x87\x96\x7d\x53\x14\x28\x17\x56\xd6\x8f\x2c\xcf\x41\x92\x96\x8c\x66\x04\x3a\x23\x50\x1a\xb5\x51\x20\xa6\x80\x10\x88\x01\xf2\x04\x98\x56\xf0\x68\x26\x14\x0b\x3e\x65\x29\x4c\x85\x84\x58\x70\x4e\xb1\x66\x33\xa6\x17\xcf\x7a\x04\x88\x44\x49\xd2\xb1\x3c\x4c\xec\x1e\x6f\x49\x07\x30\xd4\x27\x49\x52\xa5\xe0\x8a\x54\x83\x37\x80\xe8\xe7\x37\x6f\x5a\x9f\x00\xa2\x84\x54\x2c\x59\xa9\x03\x50\x6a\x84\xbc\x44\xd6\x20\xb8\xb2\x0c\x20\xfa\x7f\x49\x53\xbb\xe2\xff\x06\x09\x4d\x19\x67\x96\x82\xb2\xf6\xf7\xe6\x5f\xf2\x76\x4f\x65\xbe\x88\x1a\xcb\x9f\x4e\xba\xfe\xfd\x54\x13\xa2\x44\x89\x05\x69\x92\x4b\x93\xf9\xff\x5a\xec\x57\xb8\x75\xff\x7f\xb5\x56\xb4\x1b\x2c\xc8\x6a\xdf\xda\xa2\xd2\xbf\x16\x30\x21\xc8\x85\x78\xa4\x04\x4c\x79\xda\x26\xc1\xdc\xca\xaf\x86\xe4\xa2\x3d\x24\xe9\xab\x61\x92\xac\x21\xa6\x98\x2b\x6a\x0d\xeb\x45\xe9\x18\x53\x5a\x32\x9e\x46\x9d\x02\x7f\xae\x09\xac\x31\x6d\x8b\x5a\x9d\xf4\xe5\xe2\xcf\x27\x2d\x4d\x45\x09\xe5\xa4\x69\x3d\x0a\xfd\x9c\x25\xea\xd6\x20\xea\xd2\x4d\x3d\x5a\x50\x35\xd8\x3b\x16\x5c\x7d\xcc\x50\x03\x53\x75\x5c\xfd\x49\x81\x5d\x68\xe1\x95\x90\xd2\x52\x2c\x7e\x3c\x64\x95\x42\x6d\xf0\x6e\xa5\x14\x33\x66\x23\xcc\x56\xd0\xba\x90\x84\x47\x0c\xad\x06\x7b\xbf\x09\xb4\x26\x22\x59\x31\xbd\x47\x45\xd7\x48\x0d\x14\x5a\x9a\x36\x26\xbe\x8d\xd8\xd7\x2a\xdd\x46\xe8\x6f\x01\x2e\xb3\x01\x5b\x98\x7c\x31\x4a\x03\xee\x08\xb2\x73\xb7\x2c\x30\x70\x23\x12\x52\xc7\x87\xb4\x06\x8f\x7f\x1c\xa4\x35\xc4\x7e\x71\xa4\x9d\xd4\x74\xd6\x4e\xe1\x06\x39\x6b\xb8\xb6\x1d\xf2\x38\x04\xbb\xd6\x66\x11\x81\x96\xda\x2a\x3d\x7b\x67\x37\x3c\x3a\x20\x36\xf9\xdb\x0b\x89\xdf\xd0\x28\xa6\x4c\x25\x26\xb4\xab\x5d\x8c\xe4\x10\x96\x82\x70\x3a\x52\x2e\x85\x46\x48\xd9\x8c\xf8\x16\x3e\xe3\x2d\xe9\xf7\x9e\x40\xe0\x7c\xc8\xa7\x42\x16\x6e\xc6\x51\x1a\xad\x97\xdb\x23\xce\x88\x40\xdb\x6f\x73\x02\x5b\xaa\xda\xca\x8d\x25\x64\xd3\x17\x67\xab\x60\xbf\x1f\x30\x47\xda\x18\xc6\xb4\xa6\xa2\xd4\x36\x11\xac\x40\xba\x4d\x18\x6b\x5a\xf8\xf8\x40\xd8\xe4\xef\x8f\x13\xc3\x9a\x72\x7f\x9f\x20\xb6\xec\xea\xec\xec\x27\xc3\x52\x60\x4b\x97\x01\x38\x11\x46\x03\x96\x0c\x14\xc9\xd9\x26\x47\xf9\xc1\x53\x38\x76\x0f\x19\xd8\xfc\xcd\x42\xda\x73\xff\xaa\xc6\xd0\xb2\x83\xd4\xce\x7c\x7c\xc3\xee\x9e\x0a\x31\xa3\x6b\x8c\x33\xc6\x69\x54\x52\x5c\xb7\x68\xe5\xbf\xc4\xe4\x0b\xc5\xcb\xd4\x21\x2a\xa5\xb5\x89\x66\x2d\x15\x47\x59\xbb\x58\x5b\xf5\x81\xaf\x1a\x63\x55\x33\xf1\x21\x23\xb0\x8b\x9d\x1f\x1e\x8d\x7e\x01\x8c\x63\x52\x6a\x29\xe9\x53\x27\x18\x5b\x3a\xee\x80\xc5\x01\xc2\xa4\x4c\x8f\x57\x51\xbe\x9b\x4c\x1a\x53\x10\xdc\x45\xa0\x94\x69\x90\x54\x0a\xc5\xb4\x90\x35\x38\xd4\x8d\x6e\xb7\x8c\x45\x51\xb0\x03\xb4\x88\x2a\xab\xda\x4b\x76\xcb\x40\xae\x77\x3b\x2d\x89\xc6\x4a\x63\xab\x7b\xb3\xed\x96\x1f\x33\xd2\x19\x49\x10\x12\xb8\xd0\x6e\x57\x4b\x11\xe6\xa8\x20\xce\x09\x39\xcc\x33\xe2\x30\x31\x2c\xef\x61\xc2\x0e\x25\xe3\x64\x5f\x06\x2e\x51\xbb\x76\x9a\x23\xd3\x23\xa6\x38\xc8\x8e\x01\x55\x76\x93\x54\x80\x51\x94\xd8\x38\x1a\x8b\xa2\x64\x39\x75\xef\x18\x06\xe5\x5e\xfb\x5d\x84\xc5\x6e\xab\x6e\xfa\x65\x8e\xda\x62\x7c\x2f\xfa\x77\x61\x31\x30\xed\xcd\xe4\xf7\x4b\xdc\xd9\x1b\x80\x34\x9c\xdb\x8c\xc8\xf7\xa2\xc3\xde\x9d\xa7\xaf\xbf\xa6\x3a\xe0\xd4\x85\x40\xbb\x0f\x12\xf7\xca\xf6\xba\x15\x8c\x49\x32\xe6\xae\x6e\xef\x61\x05\xa5\xc4\x66\xb8\x8f\x98\xa6\xa2\x3d\x7f\x73\x98\xf0\x5e\xb8\xee\x7f\xeb\xa1\xa1\x5b\xd4\x30\x5b\xc1\x3c\x63\x71\x66\x05\x9c\x23\x77\xd9\x1d\x26\x0e\x9c\x35\x1d\x74\xcb\x27\x9d\xd7\x7f\x59\x11\xb7\x8d\x37\x87\xc8\xeb\xe5\x80\xa9\x14\x45\x8f\xd0\x3b\x20\xd7\xc7\xe9\x03\xb0\x2b\x1e\xfb\x74\x39\x11\xc2\x3a\xc3\xa6\x36\x7d\x94\xea\x1d\x5e\x22\x1b\x2d\xaa\x99\x02\x04\x65\x5c\x5c\x9c\x1a\x9b\x4c\x7d\x35\xa4\xf4\xd6\xa2\x06\x21\x2f\x49\x23\xcb\x87\x9a\x8a\x43\x24\x65\xc9\x5e\x67\x74\x78\xd9\xba\xf9\xe8\x46\xe7\xde\x3e\xa0\xe3\x6e\xa5\x7b\x07\x7f\x09\x36\x2e\x48\x29\x4c\xf7\xdb\xeb\x3c\x49\x1c\xd0\x31\xef\x48\x64\x9b\x17\x6d\x1b\xd9\x59\xde\xbb\x1d\xec\xfa\x6a\x57\x78\x2e\x4a\xb9\x1b\xbc\xad\x7c\x82\xe7\xb7\xcd\xc0\xa6\xc6\xad\xa7\x38\xf2\x6b\xfb\xd3\x92\x4d\xca\xd8\x0a\xbb\xff\x43\xed\x51\xa1\xf6\xf8\x01\x33\x6a\x73\xd8\xa7\xa4\x88\xb8\x29\x1a\xe5\x56\x34\x7a\x38\x7f\x78\x3f\x1a\xbf\xbf\x19\xdd\x5d\x5d\x0c\xff\x31\xbc\xba\xac\xd7\x98\x77\xf7\xb7\x1f\x86\xa3\xe1\xed\xcd\xf0\xe6\x6d\xfd\xfb\xfd\xfb\x9b\x95\x4f\x57\x17\xb7\x37\x17\xc3\x77\xad\xcf\xa3\x87\xdb\xbb\xbb\xd6\xb7\xab\xfb\xfb\xdb\xfb\xfa\x87\xcb\xab\xb7\xf7\xe7\x97\x57\x97\x95\xe0\x9f\x6b\x37\xae\x53\x34\xb9\x8b\x1e\x6b\x38\x5d\xea\xf4\x35\xac\x4e\x3b\x83\x1b\xa1\x41\x91\xfe\xc4\xe1\x35\xd4\x45\x3a\x03\x6b\x83\xfa\x17\x67\x10\x02\xc6\x13\x16\xa3\xa6\x66\x9e\xc5\x14\x4c\xc8\x26\x56\xb1\xbb\xc7\x49\x4e\x1d\xc1\xa0\x0b\x4f\x2b\xfc\xb1\x96\x4c\x86\x96\x0e\xf1\x8a\x8c\x7f\x97\xa0\x60\x6a\xf2\x7c\x01\x46\xe1\x24\xa7\x40\x7a\xa9\xd3\x40\x7e\xf9\xa1\x63\x0b\xd4\xa0\x44\x41\x30\x17\xf2\xd1\x12\xc4\x58\xb3\x19\xe5\x8b\xc0\x75\x22\x38\x55\x65\x5a\xe0\xe5\x95\x0d\xb5\x19\xa0\x0a\x79\xa2\x9d\x66\x87\x0b\x74\x9c\xba\x72\x27\x21\x50\x62\xaa\x2d\xde\x3c\x57\x95\x49\x3d\x4b\xd5\x5f\xdb\x69\xce\xdf\x8e\x27\x8e\x8e\x83\x81\x27\xe2\xfe\xb9\x96\x42\x81\x56\x0c\x30\xdc\xeb\xc7\x11\xa8\x60\xe3\x69\x54\x7f\xad\x25\x13\x5a\x55\xca\x56\x1d\xd2\x29\xc8\x2a\xc4\x66\x58\x4a\x0b\x49\xce\x06\x30\x35\x3c\xf6\xde\x83\xe9\x50\xc2\xae\x1e\xbd\xf6\x55\xde\xf7\x28\x06\xfa\x1f\x59\x3c\x5f\xe4\xf5\xd5\x56\x8f\x7f\x51\xfb\x94\x8b\xad\x36\x92\xd5\xfb\x6c\x59\x38\xfe\x6a\x26\x24\x39\x59\xa5\xdb\xda\xc3\xe2\x90\x3c\x84\xd4\x29\x5c\x08\xae\xa5\xc8\xa1\xcc\x91\x3f\xaf\x52\xae\x68\x49\x48\x93\x2c\x18\xa7\x04\x26\x0b\x27\x4d\x2d\x73\x3e\xed\x16\x20\x63\x69\x36\xc6\x19\xb2\x1c\x27\xcc\x19\xea\x45\x92\xd2\xd5\xc2\xbf\x86\xe9\x5f\xce\x7b\x62\x24\x69\x2b\xfb\x78\x8a\x13\xc9\xe2\xbd\x9b\x1c\x7e\x79\xb0\x68\x7f\x99\x1c\x7b\xc5\x8e\x9d\x62\x7f\x9c\x7a\xce\x16\xe4\x92\x29\xda\x1c\x81\x3d\x8e\x7e\x8f\x92\x61\xc9\xc6\xc4\x93\x52\x30\xbe\x6f\x2f\x8c\x29\x50\x99\x30\x79\x62\x41\x82\x30\xc3\xdc\x10\xe4\xec\x91\x80\x95\x67\xa5\x90\x3a\xb4\x07\x58\x9e\x87\x19\x4c\x6a\x83\x39\x0c\xef\x06\x76\xf8\x13\xbf\x43\xa5\xec\xc9\xc3\xf8\xd1\x62\x8d\xfe\xa5\x49\xda\xcc\x29\x36\x4a\x8b\x82\xa4\x0a\x08\xb4\x7e\x37\xf4\x84\x0a\xc3\x9d\x73\xdd\x2a\xe3\x2e\x25\x9b\xa1\xa6\xf1\x23\xf5\x9e\xd1\xf5\x9d\x1c\xbf\x1e\x1e\x69\xf1\xdc\x97\x52\x2a\x03\xc6\xb5\x80\x22\xa8\x7e\xfb\x9c\x69\xf5\xe9\xc9\x11\xd6\xc2\xfd\x6e\x67\x8e\xaa\xee\xdd\xbd\xc3\x64\xaa\xa3\x50\xae\xbb\x88\x95\xe7\x94\xdb\x1c\x85\x7a\x3d\xd2\xef\xa5\x12\x57\x6a\xb7\x73\xd8\x8a\x1f\xa8\xae\x29\xb6\x36\x50\xc7\xb3\xb3\xe3\x33\xd0\x85\x3b\x71\x75\x79\x27\x54\xbd\x3e\xeb\xf3\xd3\xdd\x85\xc4\x56\x47\x60\xd4\x28\x13\x76\xed\x89\x74\x3d\x3d\x38\x3e\x95\x0e\x5b\x29\xa3\x4f\x54\xd5\x42\x59\xf8\xad\x43\xf5\xcb\xc7\x84\xfa\x41\xd8\x1c\x0d\xde\xb5\x1f\xad\xec\x6e\xa7\xdf\x9d\x8d\xf6\xf3\x3c\xb5\x2e\xde\x0e\x3a\xdc\xf0\x62\xe3\xf8\xb4\x7a\x81\xbc\xed\x4a\x42\xdb\xbe\xc7\x93\x54\xc9\xf3\xe1\xc0\x5f\xf3\x74\x63\x4d\x13\xae\x91\xbc\x97\x42\x29\x66\x53\x03\xc9\xd2\x4c\x03\x17\xf3\x5d\x8c\xd5\xb8\x3c\x3e\x3e\xd3\x0c\xa7\xf0\x7c\x2f\xef\x42\xef\xed\xaf\x6b\x4d\x32\x66\x9d\xb7\xb2\xd0\x8f\xf9\xcd\x97\xbb\xeb\xef\xeb\xea\x33\x57\xf5\xbe\xda\x21\x71\xbb\xb8\xf2\xac\x2a\xdc\x1a\xe1\x64\xc5\x46\xcb\x9a\xee\x1d\x4e\x28\xff\x2e\x75\xae\x4d\x33\x78\xa8\x75\x11\x72\xc7\x47\xb7\x15\x6c\xf6\xbb\xf7\x16\x3e\x77\xee\xdc\x63\x3d\x8e\x57\x5f\xaa\xfc\xf0\x57\x83\x87\x5c\x25\xd7\x7d\x84\xdb\x79\x4e\xf5\xfe\x92\xf8\xdb\x9e\x8a\x3d\x56\x27\xf1\x6d\x6e\xae\x56\x0b\xcf\x03\x24\x35\xca\xd6\x70\x07\x1c\xb7\x8a\x40\xff\x53\x95\x7a\x2f\xe6\xe5\x1e\xc4\xd4\xeb\x48\x21\x7b\x77\x61\x5c\x53\xda\x78\x4f\xd5\xb0\x1f\xe3\xfa\xcf\x3f\xaf\xe1\xc1\xd5\xc9\x5b\xf1\x80\x4a\xcd\x85\xdc\xe9\x86\xa5\xa3\x67\x56\x91\x69\xed\x79\x0a\xae\x9e\x67\xca\x55\x7d\xac\x28\x73\x2a\x88\x6b\x4a\x60\xce\x74\xc6\x1a\x59\x02\x96\xec\x13\x9f\x50\x8c\x46\x91\x1b\x16\x46\xc3\x23\x17\x73\x3e\x76\x1a\x55\xa6\x74\x52\x21\x5c\x0f\x1f\xae\x21\x46\x0e\x29\xf9\x52\xb2\xda\xfd\x14\xce\xfd\x20\x53\x9f\xb8\xd2\xee\x09\xa5\xad\x2d\x27\x39\x15\x8e\x33\x5b\x71\x4f\xd0\x96\xdc\x68\x74\x46\x5c\x87\xdf\xf0\xfd\x15\x68\x46\x1c\x98\x2b\x47\x16\x90\x08\xc7\x6f\x20\xff\x89\xdb\x65\x6e\xc0\x6e\xea\xe9\xb2\xa2\x24\xa9\x04\x77\x3d\x03\xd7\x60\x76\x30\x3f\x85\x87\xdb\xcb\xdb\xb3\xa5\xa8\x35\x09\x54\x4f\xe3\xcf\xb9\xe6\x97\xcf\xf9\xdb\x71\x6f\x73\x6a\x64\x0d\xeb\x99\x73\xca\xab\x89\xd9\x55\x02\xac\x46\x66\x77\x1f\x54\x52\xcc\xa6\x41\xcd\xe1\x69\x75\xf5\xcd\x35\x52\xdb\xbf\xe1\xac\xba\x35\x97\x22\xae\x3d\x82\x6b\x41\xee\x5a\x48\x0a\x97\x5f\x5b\xff\x9e\x75\xf7\x9f\xa0\x5a\x9e\x4e\x9e\x4e\xfe\x1b\x00\x00\xff\xff\x62\x37\x12\xf8\x62\x3b\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 15202, mode: os.FileMode(420), modTime: time.Unix(1539062585, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
