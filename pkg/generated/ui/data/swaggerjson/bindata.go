// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdd\x6f\xdb\xb6\x16\x7f\xcf\x5f\x71\xa0\x7b\x81\xfb\xd2\xda\x69\xef\x4b\x91\xfb\x72\x8b\x04\x68\x83\x36\x5b\xb0\x14\xcd\xc3\x50\x18\x34\x75\x2c\x9d\x9a\x22\x15\x92\x72\xe6\x0d\xf9\xdf\x07\x92\x92\xf5\x61\xc9\x71\xe4\x2c\xf3\x86\xf5\xa5\x89\xc9\xf3\xfd\xe3\xf9\x72\x7e\x3b\x01\x88\xcc\x3d\x4b\x12\xd4\xd1\x19\x44\x6f\x27\xa7\xd1\x2b\xf7\x19\xc9\x85\x8a\xce\xc0\x9d\x03\x44\x96\xac\x40\x77\x7e\x2e\x0a\x63\x51\xc3\x15\x93\x2c\x41\x0d\x5f\xaf\x6e\x99\x46\xf8\x88\x22\x47\x0d\xef\xaf\x2f\x3d\x35\x40\xb4\x42\x6d\x48\x49\x47\xb3\x3a\x9d\xbc\x29\xd9\x02\x44\x5c\x49\xcb\xb8\xdd\xf0\x06\x88\x24\xcb\x3c\xf3\x2b\xe2\x29\x43\x01\x5f\x51\xe2\xaf\xc4\x4a\x0a\x80\xa8\xd0\xc2\x9d\xa7\xd6\xe6\xe6\x6c\x3a\x4d\xc8\xa6\xc5\x7c\xc2\x55\x36\x35\x2c\x33\x85\x4c\x5e\x73\xc9\xed\x94\x67\xec\xf5\x2a\xbb\x67\x1a\x6b\x52\xcc\x18\x79\xe2\x6c\x15\xb8\xfe\x3f\x71\x9f\x38\xe2\xc8\xdf\x79\x38\x01\x78\xf0\x26\x1b\x9e\x62\x86\x26\x3a\x83\x9f\x83\xaa\x5e\x5e\xa5\xb7\xfb\xc5\x51\x7c\xf3\x77\xb9\x92\xa6\x68\x5d\x66\x79\x2e\x88\x33\x4b\x4a\x4e\xbf\x1b\x25\xeb\xbb\xb9\x56\x71\xc1\xf7\xbc\xcb\x6c\x6a\x6a\xbf\x4f\x59\x4e\xd3\xd5\x9b\x29\x0f\x6e\x6f\x3a\x2d\xc1\xa6\x0f\x9d\xfa\x45\x96\x31\xbd\x76\xb6\xde\x92\x10\xa0\xd1\x6a\xc2\x15\x82\x4d\x11\x8c\x65\xb6\x30\xa0\x16\xc0\xa0\x64\x06\x4c\xc6\x40\xd6\xc0\xb2\x98\x23\x57\x72\x41\x09\x2c\x94\x06\xae\xa4\x44\x6e\x69\x45\x76\xbd\xf1\x23\x40\xa4\x72\xd4\x5e\xe5\xcb\xd8\xc9\xf8\x80\xb6\x04\x43\xf3\x92\x46\x93\x2b\x69\xd0\xb4\x74\x03\x88\xde\x9e\x9e\x76\x3e\x02\x88\x62\x34\x5c\x53\x6e\x4b\xa0\x34\x18\x05\x8b\x5c\x40\xd8\x16\x19\x40\xf4\x6f\x8d\x0b\x47\xf1\xaf\x69\x8c\x0b\x92\xe4\x38\x18\x17\xff\x10\xfe\x5a\xb7\x9f\x30\x17\xeb\xa8\x45\xfe\x70\xd2\xf7\xf3\x43\xc3\x88\x9c\x69\x96\xa1\x45\x5d\x87\x2c\xfc\xeb\xa8\x5f\xe1\xd6\xff\xff\x6a\xa7\x69\x3f\xb0\x0c\x9d\xf7\x5d\x2c\x2a\xff\x5b\x05\x73\x04\xa1\xd4\x12\x63\x28\xf2\x49\x97\x05\x79\xca\xbb\x02\xf5\xba\x7b\xa4\xf1\xae\x20\x8d\x2e\x10\x0b\x26\x0c\x76\x8e\xed\x3a\xf7\x8a\x19\xab\x49\x26\x51\xaf\xc1\xdf\x1a\x06\x5b\x96\x74\x4d\xad\x5e\x7a\x4d\xfc\xed\xa4\xe3\xa9\x28\x46\x81\x16\x77\xa3\x30\xdc\xa9\x51\xb7\x03\x51\x17\xfe\xea\xd1\x82\xaa\xa5\xde\xb1\xe0\xea\x36\x65\x16\xc8\x34\x71\xf5\x1f\x03\x8e\xd0\xc1\x2b\x46\x63\xb5\x5a\xff\xf5\x90\x95\x17\x8f\x24\xb7\x5c\xab\x15\xb9\x02\xb3\x17\xb2\xce\x35\xb2\x23\x46\x56\x4b\xbd\x17\x41\xd6\x5c\xc5\x5b\x91\x0f\xa0\xe8\x3b\x69\x60\xc2\xea\xa2\x0b\x89\xe7\x31\xfb\xca\x24\xfb\x18\x3d\x1e\x5b\x27\x0d\x9f\x75\xeb\xea\x54\x90\xb1\xe3\x8a\x2b\x03\x47\xeb\x52\x7b\xc9\xcb\xec\x55\x33\x3f\x3b\x81\x47\x07\xc4\xb6\x7e\xa3\x90\xf8\x0c\x41\xa9\x5b\xc7\x27\xc5\xa3\xd0\x12\x4a\x52\x70\xdd\xab\xce\xbc\xe7\x81\xcd\x55\x61\x81\xe5\x04\x06\xf5\x6a\x67\x9e\xf8\x80\xf6\x6b\xe0\x70\x59\x33\x38\xca\x30\x95\x6a\xbe\x58\x88\x36\x4d\x72\x43\xa1\xba\x4d\xed\x28\xd4\xe3\xc3\x46\x2c\xab\x12\xa2\xe6\xdf\x91\xd7\x8f\xc0\xb5\xc9\x39\x6a\x4b\x1d\xe7\x46\x09\xd9\xd9\x36\x24\xa0\xa7\x1a\xbd\x6a\x9d\x55\x23\xcb\x97\x14\xc1\xb2\x04\x94\xf4\x55\x32\x21\x0b\x1a\x73\x65\xc8\x2a\xdd\xf0\x5d\xd3\x43\x4e\x24\x57\x59\x46\x76\xb4\xc4\x94\x99\xb4\x6a\xf8\x9c\xc8\x92\xdd\xa0\x38\xab\x11\x67\xae\x4b\xc7\x51\x22\x6f\x53\xb4\x29\x6a\x50\x1a\xa4\xb2\x5e\xaa\xe3\x08\xf7\xcc\x00\x17\xc8\x24\xdc\xa7\x28\x61\x5e\x90\x18\x50\xc2\x1d\xc5\xb3\x78\xac\x02\x17\xcc\xfa\x06\xd7\xb3\x19\x30\x53\x1d\x14\xc7\x12\x55\x4e\x48\xa2\xa0\x30\x18\xbb\x16\x87\xab\x2c\x27\x81\xfd\x12\xcb\x43\x3d\x4a\xde\x79\x49\xec\x45\xf5\xf3\xcf\x05\xb3\x0e\xe3\xa3\xf8\x5f\x97\xc4\x40\x36\x84\x29\xc8\x8b\xfd\x10\x36\x05\x5d\x48\x49\xd2\xc1\xb6\x21\xbb\x37\x6f\xd6\x05\x35\x3c\xe2\x0b\xb4\x8c\xc4\xa5\xc5\xec\x90\x67\x47\xf1\x28\xab\x2e\x2f\x3a\x63\x4e\xbf\xe7\xca\x46\xe4\xe9\xfc\x7b\x06\xa9\x7e\x09\x61\xe2\x1d\xf9\x98\xea\xa6\xba\x1e\x9c\x1f\x95\x58\xcf\xd1\x07\x4b\x6d\x8c\xe4\x1e\xe3\x7e\x22\x77\x3f\xf6\x2b\xb1\x17\x2c\xfe\x01\xc4\x8b\x00\xe2\x91\x58\x74\x7b\xde\x03\x02\xf2\x9c\x2e\x2b\x97\x11\x9b\xb1\x6a\x30\xe3\xb9\x0b\xf1\x76\x46\x7d\x4a\xab\x7f\x5d\xf2\xb8\xc9\x91\xef\xa8\xa0\x95\x28\x30\x39\x72\x5a\x94\xfb\xb2\x71\x9e\x6e\x89\xfc\x33\x5c\xde\x44\xd0\xc6\xb0\xd7\x20\x68\x89\x50\xae\x2c\xfb\x73\xca\x3b\x33\xa6\x68\x76\x3a\x4f\xe7\xce\x55\x5d\x3e\x3f\x15\x73\xd4\x12\x2d\x1a\x5f\x6b\xee\x95\x5e\xa2\xeb\x1b\x62\x34\x13\x38\x57\xd2\x6a\x25\x20\x17\x4c\x6e\xa8\x0c\x30\x8d\x10\xbb\x09\x33\x23\x89\x31\xcc\xd7\xde\x94\x2b\xc6\x53\x92\xe8\xdc\x3a\xe9\x37\xa0\x34\xee\x00\xb8\x84\x15\xf3\x23\x60\x29\xf7\xd0\x43\x50\x69\x28\x94\x52\x92\xce\xd8\x8a\x91\x60\x73\x12\x64\xd7\x43\x7e\x9d\x2b\xe5\x1a\xa7\xb6\xd0\xd0\xd1\x0e\x1e\xef\xea\xc7\xaa\x97\x46\x06\x3e\xbe\x1f\x48\x82\x68\x5d\x30\x66\x0b\x36\xd7\xc4\x47\xf7\x9e\x81\xbc\x7c\xd2\x9d\xee\xe5\x09\x8f\x26\x0c\x17\x07\xbc\x16\xb5\x7c\x69\xdf\xba\x3e\xaa\x91\xc3\x02\x4c\xc9\x80\xc6\xbb\x02\xcd\x40\xe7\xbb\xbd\x5c\xdf\x0b\xa3\x8d\xaa\x3a\x1c\x8a\xd8\xf7\x62\xdd\x72\x51\xe9\x03\xd5\x3c\x39\x2e\x40\x8d\x97\x71\x60\x4e\x33\x39\xe3\xe3\x12\xdb\x17\xe7\xde\x0d\x0b\x60\x42\xc9\x04\xee\xc9\xa6\x4d\x7b\xfd\x3e\xd2\x7f\x38\x98\x95\xa1\x90\x74\x57\xa0\x58\x03\xc5\x28\x2d\x2d\xd6\xc0\x20\xf3\xdf\x32\xc5\xbb\xeb\x7a\xae\x69\xc5\x2c\xce\x96\x38\xf8\x94\xf7\x48\x91\xd7\x81\x0b\x2c\x71\xed\x93\x22\x13\x22\x64\x44\x20\xd9\x34\xe5\x7f\x0e\x73\x08\xd6\xe7\xf3\x70\x52\x7d\x27\xf6\xfe\xfa\x12\x6e\x6e\x3e\xd6\xf9\xdd\xa6\x68\x10\x38\x93\xee\x1d\x96\xa9\x09\x63\x20\x19\x63\x8e\xd2\x99\x29\xd6\x03\x69\x33\x0b\x89\x75\xb0\x5d\x61\x5a\xb3\xf6\x9e\x2e\x22\x8b\x59\xf7\xfe\xe3\x30\x6e\x64\xf0\xd6\x36\xb7\x3f\xda\xe5\x6d\x03\xf7\x29\xf1\xd4\x8f\x2c\x9a\x0c\x8e\x6a\x85\x7a\xf6\xe9\xc7\x97\x6b\xce\x55\x21\xe2\xd6\xd3\x9d\x63\xb5\x56\x1f\xea\x91\x0e\x68\x34\x6f\x5a\xcd\xe5\x76\xd6\xda\xed\xd1\xbe\xf5\xdd\xf1\xb9\xf4\xd2\xb4\xcb\x61\x78\x44\x66\x6d\x5c\x26\xdd\x95\xa0\xff\xf8\xc7\xd0\xcc\xe9\x8f\x3f\x86\xcf\xdd\xc5\xef\xd3\xe3\xf4\xb7\x8b\xd1\xb8\x22\xda\xd8\x58\x3c\xc1\x87\xad\x1d\xe8\x11\xfa\x70\x01\x9b\xf5\xb2\x6f\x4c\x7e\xfc\x34\xd0\x22\x07\x3b\x66\xd4\xbb\x2f\xdd\xe1\xc6\xc7\xd7\xae\xbb\x37\x69\xcd\x9b\xdb\x7e\xdf\xf8\x6d\x43\xe7\xa5\xf8\xea\x58\x0d\x13\xad\x0c\xb5\x15\xa3\x66\x6d\x39\x20\x3e\x85\x09\x1d\xc4\xe8\x7e\xb8\x62\xe0\x55\x77\x15\x9a\x71\x8e\xc6\x0c\xcc\x07\xca\x1c\xb0\xf5\x55\xc6\xee\x25\x25\x57\x7a\x50\x0a\x49\x8b\x49\xeb\x7b\x8a\x16\xea\x48\xda\xff\xbe\xdd\x35\x37\x2b\xbd\x9f\x0e\x3c\x4c\x7a\x33\x3f\xe9\x3d\xd3\x94\xb9\x7c\x67\x36\xe0\x70\x3a\xf8\x2c\xd2\x9c\x28\x27\x10\x3a\x46\x15\xa3\x9b\x84\x94\x14\xa1\xd1\x0b\x79\x66\x11\xda\xf5\x05\xa1\x88\xdd\xb1\x47\x3b\xc6\x93\xbd\xe0\xe9\xe4\x73\x8d\xbe\x7d\x64\xc2\xb8\xf9\xa7\x30\x21\xe8\xdc\xb5\x9d\x24\x93\xed\x46\xa5\xfe\x66\x03\x7f\xf1\x9d\xaa\xb8\x50\xbc\xf1\xd5\x46\xc7\xc6\x2b\xa5\xb1\xfc\x46\x69\xef\x3f\x85\x7a\xfa\x5f\x2f\x39\x9d\x4e\x1e\x4e\x7e\x0f\x00\x00\xff\xff\x1c\x19\x95\xd0\x9d\x25\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 9629, mode: os.FileMode(420), modTime: time.Unix(1537124573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
