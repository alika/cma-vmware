// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4b\x8f\xdb\xc8\x11\xbe\xcf\xaf\x28\x30\x01\x72\xf1\x8e\xbc\xce\x25\x98\x1c\x12\x63\x06\x58\x0f\xd6\xb3\x36\xd6\x8e\x7d\x88\x0d\xa1\x48\x96\xc8\xb2\xc8\x6e\xba\xbb\x28\x45\x09\xe6\xbf\x07\xdd\x24\x47\x24\x45\xea\xe9\xb1\xe5\x7d\x5c\x76\x57\xdd\xd5\xf5\xfa\xba\x5e\xcd\xf9\xdf\x05\x40\x60\x97\x98\x24\x64\x82\x2b\x08\x9e\x5d\x3e\x0d\x9e\xb8\xdf\x58\xcd\x74\x70\x05\x6e\x1d\x20\x10\x96\x8c\xdc\xfa\x75\x56\x5a\x21\x03\x77\xa8\x30\x21\x03\xef\xee\xde\xa3\x21\x78\x41\x59\x41\x06\x9e\xbf\xbe\xf5\xd4\x00\xc1\x82\x8c\x65\xad\x1c\xcd\xe2\xe9\xe5\x8f\xf5\xb1\x00\x41\xa4\x95\x60\x24\x0f\x67\x03\x04\x0a\x73\x7f\xf8\x1d\x47\x29\x52\x06\xef\x48\xd1\x7f\x19\x6b\x0a\x80\xa0\x34\x99\x5b\x4f\x45\x0a\x7b\x35\x99\x24\x2c\x69\x19\x5e\x46\x3a\x9f\x58\xcc\x6d\xa9\x92\x1f\x22\x15\xc9\x24\xca\xf1\x87\x45\xbe\x44\x43\x6b\x52\xca\x91\x3d\x71\xbe\xa8\x4e\xfd\x67\xe2\x7e\x71\xc4\x81\xdf\x73\x7f\x01\x70\xef\x55\xb6\x51\x4a\x39\xd9\xe0\x0a\xfe\x5d\x89\xea\xf9\x35\x72\xbb\xff\x71\x14\x1f\xfd\xde\x48\x2b\x5b\x76\x36\x63\x51\x64\x1c\xa1\xb0\x56\x93\x4f\x56\xab\xf5\xde\xc2\xe8\xb8\x8c\xf6\xdc\x8b\x92\xda\xb5\xdd\x27\x58\xf0\x64\xf1\xe3\x24\xaa\xcc\xde\x36\x5a\x42\x6d\x1b\x3a\xf1\xcb\x3c\x47\xb3\x72\xba\xbe\xe7\x2c\x03\x43\x62\x98\x16\x04\x92\x12\x58\x41\x29\x2d\xe8\x19\x20\xd4\x87\x01\xaa\x18\x58\x2c\xcc\xcb\x90\x22\xad\x66\x9c\xc0\x4c\x1b\x88\xb4\x52\x14\x09\x2f\x58\x56\x0f\x76\x04\x08\x74\x41\xc6\x8b\x7c\x1b\x3b\x1e\x3f\x91\xd4\x60\x68\x6f\x32\x64\x0b\xad\x2c\xd9\x8e\x6c\x00\xc1\xb3\xa7\x4f\x7b\x3f\x01\x04\x31\xd9\xc8\x70\x21\x35\x50\x5a\x07\x55\x1a\x39\x87\xe0\x06\x19\x40\xf0\x67\x43\x33\x47\xf1\xa7\x49\x4c\x33\x56\xec\x4e\xb0\xce\xff\x95\xfb\xd7\xb2\xfd\x4a\x45\xb6\x0a\x3a\xe4\xf7\x17\x43\xff\x7d\xdf\x52\xa2\x40\x83\x39\x09\x99\xb5\xcb\xaa\x7f\x7a\xe2\x37\xb8\xf5\xff\x7e\xb2\x55\xb5\x5f\x30\x27\x67\x7d\xe7\x8b\xc6\xfe\xa2\x21\x24\xc8\xb4\x9e\x53\x0c\x65\x71\xd9\x3f\x82\x3d\xe5\xe7\x92\xcc\xaa\xbf\x64\xe8\x73\xc9\x86\x9c\x23\x66\x98\x59\xea\x2d\xcb\xaa\xf0\x82\x59\x31\xac\x92\x60\x50\xe1\x8f\x2d\x85\x05\x93\xbe\xaa\xcd\x4d\x5f\x13\x7f\xbc\xe8\x59\x2a\x88\x29\x23\xa1\xed\x28\xac\xf6\xac\x51\xb7\x05\x51\x37\x7e\xeb\xd9\x82\xaa\x23\xde\xb9\xe0\xea\x7d\x8a\x02\x6c\xdb\xb8\xfa\x8b\x05\x47\xe8\xe0\x15\x93\x15\xa3\x57\xdf\x1f\xb2\x0a\x6d\x77\x44\xb7\xc2\xe8\x05\xbb\x0c\xb3\x17\xb4\xae\x0d\xe1\x19\x43\xab\x23\xde\x57\x81\x56\xa8\xe3\x0d\xd7\x57\xa8\x18\x5a\x69\x81\x42\x4c\xd9\xc7\xc4\x97\x51\xfb\xce\x26\xfb\x28\xfd\x25\xc0\x55\xee\xc0\x16\xc6\x9f\x4a\x2b\x80\x07\x82\xec\xb9\x27\xab\x05\xf8\x45\xc7\x64\xcf\x0f\x69\x1d\x19\x7f\x3f\x48\xeb\xa8\xfd\xe8\x48\xbb\x68\xd9\xac\x5f\xc2\x4d\x32\xee\x84\xb6\x03\xea\x38\x04\x47\xeb\xaa\x88\xfa\x2c\xbb\x57\x79\xf6\xd2\x31\x3c\x3b\x20\x76\xe5\x3b\x0a\x89\x5f\xd0\x29\x65\x91\x18\x8c\xe9\x50\xbf\x94\x46\x41\x4d\x0a\xda\xdb\xc8\xfa\x12\x1a\x21\xe1\x05\xa9\x3d\x62\xc6\x4f\x24\xff\xaa\x0e\xa8\x25\xbf\x55\x33\x6d\x72\xbf\xe3\x2c\x9d\x36\x2a\xed\x19\x57\x44\x20\xee\xb7\x25\x81\x6b\x55\x5d\xe7\xc6\x31\xb9\xf2\xc5\xfb\xaa\xf6\xdf\x77\x58\x23\xed\x4c\x63\x22\x94\x17\xe2\x0a\xc1\x06\xa4\xfb\xa4\xb1\xae\x87\xcf\x0f\x84\x5d\xf9\x7e\x3f\x39\xac\xab\xf7\xb7\x49\x62\xeb\xa9\xce\xc1\x71\xb2\x26\x05\x5e\x87\x0c\xc0\x50\x97\x02\x58\x30\x58\x32\x8b\x5d\x81\xf2\x5d\x75\xc2\xb9\x47\xc8\x5a\xcc\xaf\x96\xd2\x1e\xe6\x57\x2d\x81\xd6\x13\xa4\x7e\xe5\x53\x0d\xec\x7e\xa5\x5c\x2f\xe8\x0e\xa3\x94\x15\xbd\x29\x28\x6a\x7b\xb4\x89\x5f\x3a\xfc\x44\xd1\xba\x74\x08\x0a\xe3\x7c\x22\xdc\x33\x71\x90\xf6\x9b\xb5\xcd\x18\xf8\xa4\xb3\xd6\x0c\x13\xdf\xa6\x04\x8e\xd8\xc7\xe1\x37\x6f\x5e\x00\x46\x11\x59\xbb\xd6\xf4\x7e\x10\x8c\x3d\x1b\x0f\xc0\xe2\x04\x65\x12\x96\xe9\x26\xca\x0f\xd3\x49\x30\x01\xad\x7c\x06\x4a\x58\xc0\x50\xa1\x2d\x8b\x36\x2d\x38\xb4\x9d\xee\x58\x46\x3a\xcf\xf9\x04\x2b\xa2\x4d\x9b\xf1\x92\x63\x59\x1f\x37\xca\x4e\x0c\xd1\xd4\x0a\xf6\xa6\x37\xfb\xb2\x7c\x9f\x92\xa4\x64\x40\x1b\x50\x5a\x3c\x57\x77\x22\x2c\xd1\x42\x94\x11\x2a\x58\xa6\xa4\x20\x2c\x39\x1b\x11\xc2\x2d\xc5\xd3\xf8\x58\x01\x6e\x50\xfc\x38\xcd\x1f\x33\xa2\xa6\x3e\xc9\x8f\x35\xaa\x1c\x93\x44\x43\x69\x29\x76\x79\x34\xd2\x79\xc1\x19\x0d\x73\xac\x17\xcd\x51\xfc\xae\x6b\x62\xcf\x6a\xf8\xfc\x22\x43\x71\x18\x3f\xea\xfc\xd7\x35\x31\xb0\x54\x6e\xaa\xf8\xc5\xfe\xee\x4d\xc0\x94\x4a\xb9\x8a\xa8\x9a\x45\xd7\xbc\x07\x6f\xdf\x78\x4f\x75\xc2\xad\xab\x13\xed\x31\x48\x3c\xaa\xda\x1b\x36\x30\xc6\xf1\x54\xf9\xbe\x7d\x44\x14\x34\x06\xbb\xe9\x3e\x60\xa1\xbc\xbf\x7f\x77\x9a\xa8\xa2\x70\x3b\xfe\xb6\x53\xc3\xb0\xaa\xf5\x6e\x0b\xcb\x94\xa3\xd4\x29\xb8\x44\xe5\xab\x3b\x8c\x3d\x38\x5b\x36\x18\xd6\xcf\xf8\xa8\xff\xb8\x2a\xee\x9b\x6f\x4e\xd1\xb7\xd2\x03\x66\x46\xe7\x23\x4a\x1f\x80\xdc\x2a\x4f\x9f\x80\x5d\x3d\x1f\xb3\x65\xa8\xb5\x0b\x86\x5d\x6b\x56\x59\x6a\x74\x79\x8d\x6c\x74\xa8\x66\x0b\x08\xb6\xf4\x79\x71\x56\xba\x62\xea\x73\x49\x56\xf6\x56\xb5\x56\xf2\x86\x04\x39\xbb\x15\xca\x4f\xd1\x94\xe3\xa3\xee\xe8\xed\x4d\xef\xe5\x63\x18\x9d\x47\xc7\x80\x81\xb7\x95\x61\x0e\xd5\x23\xd8\xc9\x71\x66\xfd\x96\xb6\x93\xe3\xfa\x69\xed\x64\xae\xad\x57\x3a\x9f\x88\xfc\x23\xdd\xf8\xb5\xdf\x0b\x16\x7f\x00\xe2\xab\x00\x62\x87\x2f\xfa\x53\xf0\x6f\x91\x47\xc7\xdf\x27\x1f\x66\xe0\x63\x65\xc9\xfc\x6f\xf6\x98\x4a\xab\xd7\x81\xb9\x2a\x76\xb1\xae\xb9\x7e\x2e\x43\x32\x8a\x84\xaa\x81\xda\x52\x9b\x39\xb9\x62\x33\x26\x7b\x09\xd7\x5a\x89\xd1\x19\x14\x19\xaa\x07\x2a\xeb\xf3\x7d\xec\xba\xfa\x9c\x15\xc5\x10\xae\xbc\x36\xad\xa4\x73\x39\xac\x40\xca\x49\x3a\xc5\x05\x72\x86\x21\x67\x2c\xab\xc7\x89\xe7\x9b\x35\x73\x63\x68\xb6\xf0\xe2\xf9\xc8\x1d\x20\x71\xba\x4f\x67\x18\x1a\x8e\x8e\xee\x0f\x2a\xf2\xda\xa3\xe3\x15\x66\x54\x19\x76\xea\x0d\xfb\xfd\x94\x42\xae\x96\x35\x6c\x69\xf7\x85\xaf\x70\xf4\x5b\xd4\x0c\x0b\x9e\x92\x8a\x0b\xcd\xea\xd8\x36\x92\x2d\xd8\x54\x97\x59\xec\x40\x82\xb0\xc0\xac\x24\xc8\x78\x4e\xc0\xc5\x55\xa1\x8d\xd4\x95\x35\x67\x59\xbd\x83\x8d\x94\x98\xc1\xed\xeb\x89\x5b\xfe\xa0\x5e\xa3\x75\x8d\x52\x88\xd1\xdc\x61\x8d\xfe\x23\x64\x14\x66\x10\x95\x56\x74\x4e\xc6\xd6\x08\xc4\x30\xa3\xba\x9d\xca\x4b\xc5\x91\xeb\xe6\xf6\x29\x60\x0b\xc3\x0b\x14\x9a\xce\x69\xf4\x8e\x6e\x6f\x82\x2a\x7a\x98\xd3\xea\xa1\xa5\xb3\x36\x05\x56\xa2\x21\xaf\x4d\x7f\x5c\xe0\x3e\xdb\x32\x72\x3c\xec\xb8\x36\xb0\x15\xdd\xab\x80\xc9\x76\xa0\xc6\x6c\x87\x88\x8d\x2f\x91\xf6\xb9\x0a\xed\x7a\x63\x3c\x4a\xc5\xbe\x4a\xed\x27\xd2\x46\x1e\x68\x26\x7c\x7b\x3b\x68\xe0\x8b\x8d\xf3\x73\xd0\xb5\xbf\x71\x6d\x7d\x43\x6a\x3e\xdc\x18\x8b\xd3\x27\xd4\x2d\x6f\x3a\xb5\xca\xa1\xed\xc4\xd0\xab\xdd\xf9\x99\xf4\xb6\x3b\x0f\xe0\x6a\x14\x67\x57\xd6\xc1\x6f\x1b\xaa\x1f\x3f\x27\xb4\x2f\xc2\xee\x6c\xf0\xb2\xff\xde\x7b\xb8\x9f\x7e\x73\x3e\x3a\x2e\xf2\xb4\x1a\xe0\x03\x6c\xb8\xe3\xb1\xf3\xfc\xac\x7a\x8d\xaa\x1f\x4a\xea\x89\xd7\x48\x24\x69\x8a\xe7\xd3\x81\xbf\xe5\xd5\x73\x4b\x07\xd5\x29\xde\x0b\x6d\x2d\xbb\xd2\xc0\x70\x92\x0a\x28\xbd\x3c\xc4\x59\x9d\x77\x97\xf3\x73\xcd\xed\x0c\x1e\x9e\xb4\x7c\xea\x7d\xf5\xf3\x56\x97\x4c\x79\xf0\x41\x03\xc6\x31\xbf\xfb\x5d\x64\xfb\xa8\xbb\xbd\x73\xd3\xee\x0f\x76\x7b\xa0\xf3\x5c\x7c\x7b\xd6\x34\x6e\x9d\x74\xb2\xe1\xa3\x75\x4f\xf7\x12\x43\xca\xbe\x49\x9f\xeb\xca\x0c\x55\xf7\xba\x08\x99\x97\x63\xd8\x0b\xae\xfa\x3d\x9a\x45\x55\x3b\x0f\xf2\xd8\x8e\xe3\xcd\x47\xde\xef\x7e\xaa\x7e\xca\x2b\x4c\x3b\x46\x78\xce\xcb\x26\xa0\x39\xd6\xa2\xff\x71\xa4\x61\xcf\x35\x48\x7c\x99\xa1\xef\x66\xe3\x79\x82\xa6\xa5\x75\x3d\xdc\x09\xd7\xad\x39\x60\xfc\x95\xb7\x3d\x8b\x79\xbc\xb7\xe4\x76\x1f\xa9\xcd\x28\x17\x56\x42\x49\xe7\x53\x84\x8e\xff\x58\xc9\x5f\x9f\x6d\x91\xc1\xf7\xc9\x7b\xc9\x80\xd6\x2e\xb5\x39\x68\x82\x3a\x30\x33\x6b\x8e\xe9\xf1\xbc\x04\xdf\xcf\xb3\xf5\x5d\x1f\xe7\x45\x46\x39\x29\xa1\x18\x96\x2c\x29\x77\xaa\x04\x2c\xf8\x83\x0a\x29\xc2\xd2\x92\x5f\xd6\xa5\xc0\x5c\xe9\xa5\x9a\x7a\x8b\xda\xb2\xf0\x5a\x21\xdc\xdd\xbe\xbd\x83\x08\x15\x24\x54\xb5\x92\x0d\xf7\x4b\x78\x5e\x2d\xb2\xfd\xa0\xac\xf8\xaf\x8f\x5c\x6f\x19\x66\x94\x7b\xc9\x5c\xc7\x1d\xa2\x6b\xb9\xb1\x94\x94\x94\xd4\x7f\xfe\xf2\x77\xa0\x05\x29\x60\xdf\x8e\xac\x20\xd6\x5e\xde\xfa\xf8\x0f\xca\x91\xf9\x05\xc7\xb4\x3a\x97\xf3\x82\x8c\xd5\xca\xcf\x0c\x52\x6a\xda\xf6\x4b\x78\xfb\xea\xe6\xd5\xd5\x5a\xd5\x96\x06\x76\x64\xf0\xe7\x43\xf3\xe3\xd7\xfc\xfd\xbc\xb7\xbb\x34\x72\x8e\xad\x84\xf3\xc6\x6b\xa9\x39\xd4\x02\x6c\x66\x66\x47\x6f\x0b\x8a\x78\x56\x9b\xb9\xfe\x2a\xb1\xf9\xcd\x0f\x52\xfb\x7f\xfe\xd4\x4c\x6b\x6e\x74\xd4\xfa\x7e\xa4\x07\xb9\x3b\x6d\xa8\xfe\x6c\x67\xef\x3f\x05\x3b\xfc\xaf\xb7\x9c\x4c\x17\xf7\x17\xff\x0f\x00\x00\xff\xff\x73\x96\x65\xb9\x9d\x36\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 13981, mode: os.FileMode(420), modTime: time.Unix(1537992097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
