// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x73\xdb\xb8\x11\x7f\xd7\x5f\xb1\xa3\x97\x3a\x9d\x44\x8c\x9d\xbb\x36\x63\xd7\x6d\x5d\x3b\x4d\x34\x89\x3f\x26\x72\x92\xb9\x27\x0d\x04\xae\x48\x9c\x49\x00\x05\x40\x29\xea\x8d\xff\xf7\xce\x02\x20\x45\x52\x94\x9d\x26\xbe\x99\xd3\xc3\x9d\xc9\xfd\xc0\x7e\xe3\xb7\x4c\x92\xc0\xb9\xd2\x1b\x23\xb2\xdc\xc1\xd1\xcb\xc3\xd7\x30\x63\xa5\xad\x64\x06\xb3\x8b\x19\x9c\x17\xaa\x4a\xe1\x8a\x39\xb1\x42\x38\x57\xa5\xae\x9c\x90\x19\xdc\x22\x2b\x81\x55\x2e\x57\xc6\x4e\x46\x49\x32\x4a\x12\xf8\x20\x38\x4a\x8b\x29\x54\x32\x45\x03\x2e\x47\x38\xd3\x8c\xe7\x58\x53\x9e\xc3\x67\x34\x56\x28\x09\x47\x93\x97\x70\x40\x0c\xe3\x48\x1a\x3f\x3b\x21\x15\x1b\x55\x41\xc9\x36\x20\x95\x83\xca\x22\xb8\x5c\x58\x58\x8a\x02\x01\xbf\x72\xd4\x0e\x84\x04\xae\x4a\x5d\x08\x26\x39\xc2\x5a\xb8\xdc\x9f\x13\xb5\x90\x25\xf0\x4b\xd4\xa1\x16\x8e\x09\x09\x0c\xb8\xd2\x1b\x50\xcb\x36\x23\x30\x17\x8d\xa6\x5f\xee\x9c\x3e\x4e\x92\xf5\x7a\x3d\x61\xde\xe0\x89\x32\x59\x52\x04\x56\x9b\x7c\x98\x9e\xbf\xb9\x9a\xbd\x79\x71\x34\x79\x19\x85\x3e\xc9\x02\xad\x05\x83\xff\xa9\x84\xc1\x14\x16\x1b\x60\x5a\x17\x82\xb3\x45\x81\x50\xb0\x35\x28\x03\x2c\x33\x88\x29\x38\x45\x46\xaf\x8d\xa0\xb8\x3d\x07\xab\x96\x6e\xcd\x0c\x92\x9a\x54\x58\x67\xc4\xa2\x72\x9d\x98\xd5\x26\x0a\xdb\x61\x50\x12\x98\x84\xf1\xd9\x0c\xa6\xb3\x31\xfc\xeb\x6c\x36\x9d\x3d\x27\x25\x5f\xa6\xb7\xef\xae\x3f\xdd\xc2\x97\xb3\x8f\x1f\xcf\xae\x6e\xa7\x6f\x66\x70\xfd\x11\xce\xaf\xaf\x2e\xa6\xb7\xd3\xeb\xab\x19\x5c\xff\x1b\xce\xae\x7e\x81\xf7\xd3\xab\x8b\xe7\x80\xc2\xe5\x68\x00\xbf\x6a\x43\x1e\x28\x03\x82\xa2\x89\xa9\x0f\xdd\x0c\xb1\x63\xc2\x52\x05\x93\xac\x46\x2e\x96\x82\x43\xc1\x64\x56\xb1\x0c\x21\x53\x2b\x34\x92\x2a\x41\xa3\x29\x85\xa5\xac\x5a\x60\x32\x25\x35\x85\x28\x85\x63\xce\xbf\xda\xf1\x6b\x32\x22\x96\x4b\xc1\x73\x86\x05\x7c\x46\x89\xff\x15\x0c\xfe\x56\xae\xc2\x5f\xff\xcc\x4a\x26\x8a\x09\x57\xe5\xdf\x47\x23\xbb\x91\x8e\x7d\x85\x53\x18\x6b\xa3\x9c\x7a\x35\x3e\x19\x8d\x34\xe3\x77\x64\x01\x2f\xd9\xaa\xa4\x48\x9e\x8c\x46\xa2\xd4\xca\x38\x18\x67\x4a\x65\x05\x26\x4c\x8b\x84\x49\xa9\xa2\x0d\x13\x2f\x3c\x3e\x69\xd8\xfc\x33\x7f\x91\xa1\x7c\x61\xd7\x2c\xcb\xd0\x24\x4a\x7b\xd6\x41\xb1\xd1\x28\x50\xe1\x20\x33\x9a\x4f\x32\xe6\x70\xcd\x36\x81\xcc\xe7\x19\xca\x79\xd4\x32\x89\x5a\x26\x4a\xa3\x64\x5a\xac\x8e\x6a\xca\x33\x38\x85\xdf\x46\x00\x42\x2e\xd5\xb1\xff\x0b\xc0\x09\x57\xe0\x31\x8c\xcf\x8b\xca\x3a\x34\x70\xc9\x24\xcb\xd0\xc0\xe7\xcb\x2f\xcc\x20\xbc\xc3\x42\xa3\x81\xb3\x9b\xe9\xf8\xc4\xf3\xaf\x42\xef\x1c\xc3\x78\xf5\x72\x72\x38\x79\x19\x5f\x73\x25\x1d\xe3\xae\xd6\x4a\x3f\xc9\x4a\x52\xdc\x8b\x71\xe4\xa7\x5f\x65\x8a\x63\x18\x53\xd9\xdb\xe3\x24\xc9\x84\xcb\xab\x05\x85\x3c\xb1\xa1\xf3\x5f\x70\xc9\x5d\xc2\x4b\xf6\x22\x84\xb8\x25\x8a\x94\x9e\x63\x18\xef\xe6\x2b\x32\xdd\xd3\xff\xfc\x7f\xf0\xab\x43\x23\x59\x31\x4f\x15\xb7\xb5\x7d\xdf\x79\x74\x8a\x96\x1b\xe1\xc3\x4b\x9e\x29\x83\xc0\x16\xaa\x72\xf0\x6d\xd1\xbb\x1f\x01\x58\x9e\x63\x89\xf6\x18\xde\xdd\xde\xde\xcc\x4e\xfa\x6f\xe8\x05\x57\xd2\x56\xfe\xcd\x38\xf6\x33\x1d\x98\xfc\x6a\x95\xf4\x6a\xb4\x51\x69\xc5\xf7\xd1\xef\x4f\x46\x23\x8b\x66\x25\x38\x36\x66\x05\xa7\xa9\x4d\x45\x51\x90\xfc\x4a\xf8\x01\xc8\x80\x07\x0e\x4f\x37\x9a\xc3\xb9\x41\xe6\xb0\x96\x3b\xe8\x3c\x5e\xda\xec\x19\x18\x74\x95\x91\xb6\x47\xfa\x88\xba\xd8\x3c\x6b\x25\xbf\xa9\x55\xdf\x0b\x13\xa6\xc5\x84\xa2\x5d\x57\xe0\xf6\xa7\x95\x75\x70\x0c\x63\xdf\x2e\xab\xc3\x24\x1a\x34\xee\x30\x2d\x54\xba\x21\xa6\x3f\x6f\x5f\xdf\xc7\x3c\x77\x3c\x33\xe8\x8c\xc0\x55\x18\x1f\xd6\x31\x57\x59\x1a\xb9\x8d\x9b\x34\x1a\x40\x38\x0b\x77\xd5\x02\xb9\x92\x4b\x91\xf9\xe9\xc2\x95\x94\xc8\x9d\x58\x09\xb7\x69\x42\xf1\x16\x5d\x13\x87\xed\xdf\xdd\x20\x6c\xdf\x7f\x7f\x04\x32\x7c\x38\x00\x83\x9e\xa6\x58\xa0\xc3\x81\x04\x5e\x78\x42\x63\x78\xe7\xb1\x6b\x7b\x87\xf4\xfd\xe6\x47\x4b\xfe\x6f\x0f\x9a\x5c\x31\x28\x84\x75\x94\xa7\x28\x68\x07\x52\xf0\x81\x58\x0e\xba\xcf\xfb\x52\x41\xb4\xa7\x4e\x47\x42\x36\x3e\xee\x51\x65\x64\x3d\x21\xfd\x94\x35\xa5\xef\xcd\x38\x25\x98\x16\x40\xad\xd9\x4a\xd7\x5b\x74\x11\x8d\x4c\x5b\xec\x07\xdb\xd7\x3b\x4e\xc6\xf7\x4f\xe6\x60\x34\xf7\x11\xdf\x58\xfa\x6b\x65\x1d\xb0\x07\x87\xc7\x99\x67\x8a\x59\xb8\x52\x29\x5a\x38\xe8\xbc\xeb\x3a\xd3\x21\xfd\xc0\x04\xa9\x9e\x74\x80\x50\x0a\x2b\x9d\x19\x96\x62\xb4\xc1\xfa\x19\xc1\x20\x13\x2b\x94\x3b\x4e\xbf\x45\xf7\x29\xb0\x47\x4f\xfa\x89\xdc\x4b\xdd\x49\xed\x5e\xce\x27\xaf\xe6\xe8\xe0\x63\x49\x77\x0e\x4b\xed\x08\x3c\xd6\x11\xd9\x4d\x7a\xd7\x68\x38\xe8\x3e\x77\x7d\xec\xd2\x9e\x3a\xe5\xbb\x5e\x3d\x96\xfa\xfb\xd1\xa8\x44\x6b\x09\xc8\xf5\x6f\xba\xed\x9d\x79\xc5\x4a\xac\x81\x7b\x7d\x8f\x38\x05\x0b\xdc\xf6\x02\xa6\x9e\x99\x60\xb2\xcc\x3c\xf0\x81\x53\x38\x3c\xa9\x35\xdc\xe6\xd8\x4c\x05\xb5\x84\xf7\xd5\x02\x8d\x44\x87\xa1\xb0\xd6\xca\xdc\xa1\x01\x49\xfd\x32\x81\x73\x25\x9d\x51\x05\xe8\x82\xc9\x46\xca\x02\xa1\x89\x14\x1d\xa1\x5c\x19\xa0\x3e\x99\x73\xc9\x78\x2e\x24\xce\x34\xf2\x49\xdb\x82\xbb\xd7\x76\x5e\x1f\x78\x0a\x47\x8d\x21\x5f\x72\xf4\xc0\x5b\x19\xbf\xdb\xb4\x3d\x12\x16\xde\x9d\x8d\x42\xc0\x54\x01\xb9\xc8\xf2\x39\x5b\x31\x51\xb0\x85\x28\x84\xdb\xc0\x29\xbc\xea\x38\xb4\x64\x0b\x23\x78\x8c\x44\x65\x7b\x21\x40\x47\x6e\xcd\x23\xd3\x29\xfc\xd4\xc8\x46\x9b\x2d\xac\x73\xc1\x73\xbf\x47\x19\x61\xb1\x6d\x4c\xa8\x2d\xd4\x94\x91\x34\x62\xa9\x96\xab\x1e\x6c\x1a\x55\xcc\x7d\x8c\xe6\x3e\x70\x70\x0a\x3f\x3f\xe5\x11\x21\x29\x8d\xee\xbf\xb4\x5c\x17\x16\x6c\xae\xaa\x22\x25\xc7\x19\xac\x58\x51\x21\x14\xe2\x0e\x41\xe8\x63\x0f\xed\x5d\xce\x1c\xac\xa9\x83\x02\x87\x30\xae\x62\x05\x4c\x6f\x12\x22\xd7\x9a\x6e\x98\xa5\x35\x75\xc1\xf8\x1d\x45\xb1\xc6\xa9\xc0\x2b\xeb\x54\x89\xc6\xc6\xd8\xfa\x6d\xce\x29\x72\xa3\xac\x24\xa1\x3d\xff\xd8\x77\x26\x46\x9e\x69\x31\x47\x99\x6a\x25\xa4\x83\x53\xf8\x6b\x63\xf8\x8d\x11\x2b\x12\xbd\xc3\x8d\x4f\x17\xe9\xb0\x36\x07\x21\x9d\x82\x32\x46\xac\xad\x49\x07\x81\x39\x09\x9c\xc2\xeb\x93\xbd\xdd\xe2\xfb\xb8\x85\x31\xf7\x17\xd9\x9a\xd9\x76\xd3\x84\x32\x16\x61\x85\x45\xeb\xb6\xe5\xa7\xee\x76\x1a\x28\x45\xc7\x44\x61\xfb\x9d\x18\x45\xc1\xa0\xd5\x4a\x5a\xf4\x22\xf5\x04\x75\x58\x36\x8c\xbe\x0f\x5a\x2e\x74\x20\xdd\xb7\x74\x7b\xa1\xd4\x1d\xad\xc8\x7a\xb8\xd7\x07\x55\xf7\x42\x33\xb5\xdd\x9e\x93\x01\xa8\x6e\xac\xc3\x72\xd7\xf9\xb6\x2b\x17\xde\xfb\x07\x1d\xea\x43\xbd\x76\x46\x98\xa3\x06\x6f\x9d\xfd\x27\x1b\x4c\x77\x8a\x96\x1a\x67\xd4\xe6\x51\xaf\x76\xf1\xe2\xf6\x84\x73\xdf\x0f\x6d\xdf\x16\x58\x2b\x8e\x93\x61\x28\xaf\xb3\x06\xa2\x93\x68\xbb\x0a\xa2\x21\x11\xc3\xef\xcf\x5d\xc4\x81\xf0\xdb\x7e\xf2\x0f\xe5\x20\x0a\x7d\x18\x44\xa8\xf5\xf8\x18\x28\xb7\x5d\x9b\xdb\x4c\x5b\x63\x2e\x7a\xb5\xd6\x76\x5e\xa4\x1d\x1b\x06\x2a\x73\x20\x67\xed\x61\xbf\xcd\xba\xed\x04\x7a\x40\xba\x09\xf4\xab\x21\xa3\x5b\xd5\xf7\xc7\x36\x7d\x40\xbe\xb5\xea\xf9\x21\xea\x37\xbd\x07\x06\x68\x8b\xdf\x5f\x5b\xad\x68\x6c\x2f\xee\x0f\x6c\x81\xc5\x36\x16\x34\x9f\x64\xf4\x91\x41\x41\xc4\xc7\x01\x81\xbf\x37\x86\x05\x02\xad\xae\xa0\x28\x50\x7f\xfe\x0a\xc8\x32\x40\xd2\xe6\x93\x18\x5d\x54\x8d\x9d\xbb\xd7\x59\xc7\xd2\xca\xd2\x45\x53\x86\x0f\x6b\xb3\xd9\x3b\x60\x9c\xa3\xed\xcc\xfe\x86\xa5\x6f\x75\x4e\xeb\xfa\x7e\x39\x4f\x6e\x67\x92\x64\xfc\x9d\x38\x20\x23\xa4\x7b\x75\x14\xa8\x7d\x70\xa1\x99\xb5\x6b\x65\xd2\x9e\xd8\x24\x5c\xbf\xc2\xfa\x9b\x45\x94\xba\xc0\x12\x25\xb5\xe0\x5a\xb8\x3c\xb6\x72\xcc\x29\xd3\xa2\xd6\xb8\x40\xce\x2a\x1b\x3e\xd4\xd2\x1e\x76\x27\xd5\x5a\xce\xbd\xad\xb6\xd2\xde\x00\x06\x97\xd3\xdb\x4b\xe0\x4c\x7a\xc8\xec\x5a\x36\x4c\xe0\x2c\x10\x85\xad\x15\x5a\xe7\xe1\x31\xdd\x65\x8b\x02\x4b\x6f\x25\x5d\x93\x0b\x46\x17\x2b\xab\x5c\x8e\xd2\xc5\x4c\x9d\x00\xd2\xda\x20\x7c\xfd\x6e\x20\x55\xde\xf6\x78\x48\xad\x90\x84\x3d\x99\x0c\x08\xda\x45\xa9\xd1\x58\x25\xfd\x75\x9f\x63\x7d\x45\x4f\xe0\xf6\xfa\xe2\xfa\x78\xeb\x7c\xcb\x1b\xdb\x01\x81\x4d\x0c\xdb\xe8\x8b\x82\xeb\xcb\xcd\x36\x9f\x55\x3b\x77\x7f\x33\xd3\xfa\xb5\x1e\x85\x3c\xcc\xba\x1f\xf9\xa2\x7c\x8b\xae\x0d\x6b\xcf\x6e\xa6\x30\x0b\xdb\x6d\x6b\x10\x6f\xd7\xd8\x30\xa3\x93\x04\xc2\x40\xa6\xe3\x6b\xe9\x7a\xf2\xef\xca\xf5\x87\xf7\x12\x94\x46\x13\x5a\x80\xd0\xc4\xf5\xfb\x3d\xf7\x66\xd3\x0b\xbb\xdb\xf5\x76\x97\x88\x01\x71\x2c\x03\x15\x8a\x27\x13\x04\x25\xb4\xb2\xc2\x29\xb3\x69\x18\x63\x48\x33\xe1\x5a\xb8\xfa\xf0\xa4\xaf\x28\x67\x36\xaf\x27\x15\x69\x22\xc8\x26\xdc\x90\x96\x40\xd9\xb6\xca\x7e\xec\xe4\x0c\xa2\x77\x95\x17\xc8\x24\xac\x73\x94\xb0\xa8\x44\x31\xa8\x96\x98\xe7\x34\x10\x71\xdb\x52\x51\xf5\x05\xbd\x54\x4b\x2f\x9b\xf6\x65\xfd\xcb\x79\x1a\xe4\x7e\xea\xc8\x7d\xde\x66\x38\x53\x0d\x72\x24\x4c\x2d\x0a\xdc\xb1\x41\xb5\xe2\xf3\x73\x47\xcf\x79\x90\x30\xdb\x5d\xa1\x25\xc7\x6b\x62\x03\xb5\x6b\xd4\x5a\x30\x47\x99\x03\xe1\x42\x10\x02\x63\x18\x0c\x09\x98\x4a\xfa\xcf\xff\x4a\xf6\x35\xea\x5a\xb0\xc1\xc0\xf7\xa3\x51\xcf\xa5\x56\x51\x78\xd2\x40\xad\x44\x6f\xe6\xed\x8f\x39\x03\x68\xe4\xa1\x1d\xff\x41\x1c\x16\x77\x05\xf4\x0b\x1e\x57\xd2\x8a\x14\xbd\xfd\xe4\x5f\xdc\x67\xbf\x05\x6f\x3e\xfc\xe9\xa0\x05\xd4\x98\xec\xc3\xb4\x78\xca\x7e\x94\xe6\xcd\xee\x6c\xa2\x5a\x59\x2b\x68\x2d\x09\xff\x5c\x27\xd5\xba\x3b\x3c\xea\x6b\xac\x96\xe9\x47\x6c\xe7\x1b\xc1\xef\x14\xa3\x01\x07\xbc\x92\x75\xed\x35\xb1\x3b\xf5\x8f\xce\xdd\xdb\xde\x9b\xf7\xda\xdc\xdf\x79\x98\x0d\x9b\x0c\x03\x5b\xf9\xab\x6a\x59\x15\xfb\xd7\x9a\x96\xda\xfe\xf7\xb1\xdf\x37\x12\xbd\xcd\x78\x4d\x93\x45\x7a\x34\xc4\xd2\x74\x08\x14\x3d\xb0\x22\xb3\x34\x6d\xf6\xe3\xa3\x6f\x38\xc1\x60\xa9\x56\x08\x4b\xa3\xca\xc7\x8e\xf9\xe8\x59\xdb\x87\x05\xe1\xe6\xbc\x57\xfd\x29\xbf\x47\x6c\x67\xd4\xef\xc3\x2f\xbb\x18\xe6\xb0\x99\x1a\xfb\xb2\xf5\xa3\x35\xf0\xbf\x00\x00\x00\xff\xff\x84\xe7\xa6\x2a\xf3\x1e\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 7923, mode: os.FileMode(420), modTime: time.Unix(1537992051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
