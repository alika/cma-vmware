// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x73\xdb\xb8\x11\x7f\xd7\xa7\xd8\xd1\x4b\x9d\x4e\x22\xc6\xce\x5d\x9b\xb1\xeb\xb6\xae\x7d\x4d\x34\x97\xd8\x9e\xc8\x97\xcc\x3d\x69\x20\x70\x45\xe2\x0c\x02\x28\x00\x4a\x51\x6f\xfc\xdd\x3b\x0b\x80\x14\x49\x49\x76\x9a\xcb\xcd\x9c\x1e\xee\x4c\xee\x1f\xec\x7f\xfc\x96\xc9\x32\xb8\xd4\x66\x63\x45\x51\x7a\x38\x79\x79\xfc\x1a\x66\xac\x72\xb5\x2a\x60\x76\x35\x83\x4b\xa9\xeb\x1c\xae\x99\x17\x2b\x84\x4b\x5d\x99\xda\x0b\x55\xc0\x1d\xb2\x0a\x58\xed\x4b\x6d\xdd\x64\x94\x65\xa3\x2c\x83\x77\x82\xa3\x72\x98\x43\xad\x72\xb4\xe0\x4b\x84\x0b\xc3\x78\x89\x0d\xe5\x39\x7c\x44\xeb\x84\x56\x70\x32\x79\x09\x47\xc4\x30\x4e\xa4\xf1\xb3\x33\x52\xb1\xd1\x35\x54\x6c\x03\x4a\x7b\xa8\x1d\x82\x2f\x85\x83\xa5\x90\x08\xf8\x99\xa3\xf1\x20\x14\x70\x5d\x19\x29\x98\xe2\x08\x6b\xe1\xcb\x70\x4e\xd2\x42\x96\xc0\xcf\x49\x87\x5e\x78\x26\x14\x30\xe0\xda\x6c\x40\x2f\xbb\x8c\xc0\x7c\x32\x9a\x7e\xa5\xf7\xe6\x34\xcb\xd6\xeb\xf5\x84\x05\x83\x27\xda\x16\x99\x8c\xac\x2e\x7b\x37\xbd\xfc\xe1\x7a\xf6\xc3\x8b\x93\xc9\xcb\x24\xf4\x93\x92\xe8\x1c\x58\xfc\x4f\x2d\x2c\xe6\xb0\xd8\x00\x33\x46\x0a\xce\x16\x12\x41\xb2\x35\x68\x0b\xac\xb0\x88\x39\x78\x4d\x46\xaf\xad\xa0\xb8\x3d\x07\xa7\x97\x7e\xcd\x2c\x92\x9a\x5c\x38\x6f\xc5\xa2\xf6\xbd\x98\x35\x26\x0a\xd7\x63\xd0\x0a\x98\x82\xf1\xc5\x0c\xa6\xb3\x31\xfc\xeb\x62\x36\x9d\x3d\x27\x25\x9f\xa6\x77\x6f\x6f\x7e\xba\x83\x4f\x17\x1f\x3e\x5c\x5c\xdf\x4d\x7f\x98\xc1\xcd\x07\xb8\xbc\xb9\xbe\x9a\xde\x4d\x6f\xae\x67\x70\xf3\x6f\xb8\xb8\xfe\x19\x7e\x9c\x5e\x5f\x3d\x07\x14\xbe\x44\x0b\xf8\xd9\x58\xf2\x40\x5b\x10\x14\x4d\xcc\x43\xe8\x66\x88\x3d\x13\x96\x3a\x9a\xe4\x0c\x72\xb1\x14\x1c\x24\x53\x45\xcd\x0a\x84\x42\xaf\xd0\x2a\xaa\x04\x83\xb6\x12\x8e\xb2\xea\x80\xa9\x9c\xd4\x48\x51\x09\xcf\x7c\x78\xb5\xe3\xd7\x64\x44\x2c\xef\x05\x2f\x19\x4a\xf8\x88\x0a\xff\x2b\x18\xfc\xad\x5a\xc5\xbf\xfe\x59\x54\x4c\xc8\x09\xd7\xd5\xdf\x47\x23\xb7\x51\x9e\x7d\x86\x73\x18\x1b\xab\xbd\x7e\x35\x3e\x1b\x8d\x0c\xe3\xf7\x64\x01\xaf\xd8\xaa\xa2\x48\x9e\x8d\x46\xa2\x32\xda\x7a\x18\x17\x5a\x17\x12\x33\x66\x44\xc6\x94\xd2\xc9\x86\x49\x10\x1e\x9f\xb5\x6c\xe1\x99\xbf\x28\x50\xbd\x70\x6b\x56\x14\x68\x33\x6d\x02\xeb\x5e\xb1\xd1\x28\x52\xe1\xa8\xb0\x86\x4f\x0a\xe6\x71\xcd\x36\x91\xcc\xe7\x05\xaa\x79\xd2\x32\x49\x5a\x26\xda\xa0\x62\x46\xac\x4e\x1a\xca\x33\x38\x87\x5f\x47\x00\x42\x2d\xf5\x69\xf8\x0b\xc0\x0b\x2f\xf1\x14\xc6\x97\xb2\x76\x1e\x2d\xbc\x67\x8a\x15\x68\xe1\xe3\xfb\x4f\xcc\x22\xbc\x45\x69\xd0\xc2\xc5\xed\x74\x7c\x16\xf8\x57\xb1\x77\x4e\x61\xbc\x7a\x39\x39\x9e\xbc\x4c\xaf\xb9\x56\x9e\x71\xdf\x68\xa5\x9f\x62\x15\x29\x1e\xc4\x38\xf1\xd3\xaf\xb6\xf2\x14\xc6\x54\xf6\xee\x34\xcb\x0a\xe1\xcb\x7a\x41\x21\xcf\x5c\xec\xfc\x17\x5c\x71\x9f\xf1\x8a\xbd\x88\x21\xee\x88\x22\xa5\xe7\x14\xc6\xbb\xf9\x4a\x4c\x0f\xf4\xbf\xf0\x1f\xfc\xec\xd1\x2a\x26\xe7\xb9\xe6\xae\xb1\xef\x2b\x8f\xce\xd1\x71\x2b\x42\x78\xc9\x33\x6d\x11\xd8\x42\xd7\x1e\xbe\x2c\x7a\x0f\x23\x00\xc7\x4b\xac\xd0\x9d\xc2\xdb\xbb\xbb\xdb\xd9\xd9\xf0\x0d\xbd\xe0\x5a\xb9\x3a\xbc\x19\xa7\x7e\xa6\x03\xb3\x5f\x9c\x56\x41\x8d\xb1\x3a\xaf\xf9\x21\xfa\xc3\xd9\x68\xe4\xd0\xae\x04\xc7\xd6\xac\xe8\x34\xb5\xa9\x90\x92\xe4\x57\x22\x0c\x40\x06\x3c\x72\x04\xba\x35\x1c\x2e\x2d\x32\x8f\x8d\xdc\x51\xef\xf1\xbd\x2b\x9e\x81\x45\x5f\x5b\xe5\x06\xa4\x0f\x68\xe4\xe6\x59\x27\xf9\x6d\xad\x86\x5e\x98\x30\x23\x26\x14\xed\xa6\x02\xb7\x3f\x53\x7b\x38\x85\x71\xe8\x96\xd5\x71\x96\xec\x19\xf7\x78\x16\x3a\xdf\x10\xd3\x9f\xb7\xaf\x1f\x52\x9a\x7b\x8e\x59\xf4\x56\xe0\x2a\x4e\x0f\xe7\x99\xaf\x1d\x4d\xdc\xd6\x4b\x9a\x0c\x20\xbc\x83\xfb\x7a\x81\x5c\xab\xa5\x28\xc2\x70\xe1\x5a\x29\xe4\x5e\xac\x84\xdf\xb4\x91\x78\x83\xbe\x0d\xc3\xf6\xef\x7e\x0c\xb6\xef\xbf\x3e\x00\x05\x3e\x1e\x80\xbd\x9e\xe6\x28\xd1\xe3\x9e\xfc\x5d\x05\x42\x6b\x78\xef\xb1\x6f\x7b\x8f\xf4\xf5\xe6\x27\x4b\xfe\x6f\x0f\xda\x5c\x31\x90\xc2\x79\xca\x53\x12\x74\x7b\x52\xf0\x8e\x58\x8e\xfa\xcf\x87\x52\x41\xb4\x6f\x9d\x8e\x8c\x6c\x7c\xda\xa3\xda\xaa\x66\x40\x86\x21\x6b\xab\xd0\x9a\x69\x48\x30\x23\x80\x3a\xb3\x93\xae\x37\xe8\x13\x18\x99\x76\xd8\x8f\xb6\xaf\x77\x9c\x4c\xef\xbf\x99\x83\xc9\xdc\x27\x7c\x63\xf9\x2f\xb5\xf3\xc0\x1e\x9d\x1d\x17\x81\x29\x65\xe1\x5a\xe7\xe8\xe0\xa8\xf7\xae\xef\x4c\x8f\xf4\x87\x19\x20\x94\xc2\xda\x14\x96\xe5\x98\x6c\x70\x61\x46\x30\x28\xc4\x0a\xd5\x8e\xd3\x6f\xd0\xff\x14\xd9\x93\x27\xc3\x44\x1e\xa4\xee\xa4\xf6\x20\xe7\x37\xaf\xe6\xe4\xe0\x53\x49\xf7\x1e\x2b\xe3\x09\x3b\x36\x11\xd9\x4d\x7a\xdf\x68\x38\xea\x3f\xf7\x7d\xec\xd3\xbe\x75\xca\x77\xbd\x7a\x2a\xf5\x0f\xa3\x51\x85\xce\x11\x8e\x1b\x5e\x74\xdb\x2b\xf3\x9a\x55\xd8\xe0\xf6\xe6\x1e\xf1\x1a\x16\xb8\xed\x05\xcc\x03\x33\xa1\x64\x55\x04\xdc\x03\xe7\x70\x7c\xd6\x68\xb8\x2b\xb1\x9d\x0a\x7a\x09\x3f\xd6\x0b\xb4\x0a\x3d\xc6\xc2\x5a\x6b\x7b\x8f\x16\x14\xf5\xcb\x04\x2e\xb5\xf2\x56\x4b\x30\x92\xa9\x56\xca\x01\x81\x89\x1c\x3d\x81\x5c\x15\x91\x3e\x99\xf3\x9e\xf1\x52\x28\x9c\x19\xe4\x93\xae\x05\xf7\xaf\xdd\xbc\x39\xf0\x1c\x4e\x5a\x43\x3e\x95\x18\x70\xb7\xb6\x61\xb5\xe9\x7a\x24\x1c\xbc\xbd\x18\xc5\x80\x69\x09\xa5\x28\xca\x39\x5b\x31\x21\xd9\x42\x48\xe1\x37\x70\x0e\xaf\x7a\x0e\x2d\xd9\xc2\x0a\x9e\x22\x51\xbb\x41\x08\xd0\x93\x5b\xf3\xc4\x74\x0e\xdf\xb5\xb2\xc9\x66\x07\xeb\x52\xf0\x32\xac\x51\x56\x38\xec\x1a\x13\x6b\x0b\x0d\x65\x24\x4f\x50\xaa\xe3\x6a\xc0\x9a\x56\xcb\x79\x88\xd1\x3c\x04\x0e\xce\xe1\xfb\x6f\x79\x44\x4c\x4a\xab\xfb\x2f\x1d\xd7\x85\x03\x57\xea\x5a\xe6\xe4\x38\x83\x15\x93\x35\x82\x14\xf7\x08\xc2\x9c\x06\x64\xef\x4b\xe6\x61\x4d\x1d\x14\x39\x84\xf5\x35\x93\x30\xbd\xcd\x88\xdc\x68\xba\x65\x8e\xb6\xd4\x05\xe3\xf7\x14\xc5\x06\xa6\x02\xaf\x9d\xd7\x15\x5a\x97\x62\x1b\x96\x39\xaf\xc9\x8d\xaa\x56\x04\xf6\xc2\xe3\xd0\x99\x14\x79\x66\xc4\x1c\x55\x6e\xb4\x50\x1e\xce\xe1\xaf\xad\xe1\xb7\x56\xac\x48\xf4\x1e\x37\x21\x5d\xa4\xc3\xb9\x12\x84\xf2\x1a\xaa\x14\xb1\xae\x26\x13\x05\xe6\x24\x70\x0e\xaf\xcf\x0e\x76\x4b\xe8\xe3\x0e\xc4\x3c\x5c\x64\x6b\xe6\xba\x4d\x13\xcb\x58\xc4\x0d\x16\x9d\xdf\x96\x9f\xbe\xdf\x69\xa0\x1c\x3d\x13\xd2\x0d\x3b\x31\x89\x82\x45\x67\xb4\x72\x18\x44\x9a\x09\xea\xb1\x6a\x19\x43\x1f\x74\x5c\xe8\x41\xba\x2f\xe9\x76\xa9\xf5\x3d\x6d\xc8\x66\x7f\xaf\xef\x55\x3d\x08\xcd\xd4\xf5\x7b\x4e\x45\xa0\xba\x71\x1e\xab\x5d\xe7\xbb\xae\x5c\x05\xef\x1f\x75\x68\x08\xf5\xba\x19\x61\x9e\x1a\xbc\x73\xf6\x9f\x5c\x34\xdd\x6b\xda\x69\xbc\xd5\x9b\x27\xbd\xda\xc5\x8b\xdb\x13\x2e\x43\x3f\x74\x7d\x5b\x60\xa3\x38\x4d\x86\x7d\x79\x9d\xb5\x10\x9d\x44\xbb\x55\x90\x0c\x49\x18\xfe\x70\xee\x12\x0e\x84\x5f\x0f\x93\x7f\x53\x0e\x92\xd0\xbb\xbd\x08\xb5\x19\x1f\x7b\xca\x6d\xd7\xe6\x2e\xd3\xd6\x98\xab\x41\xad\x75\x9d\x17\x79\xcf\x86\x3d\x95\xb9\x27\x67\xdd\x61\xbf\xcd\xba\xeb\x05\x7a\x8f\x74\x1b\xe8\x57\xfb\x8c\xee\x54\xdf\x1f\xdb\xf4\x3d\xf2\x9d\x55\x2f\x0c\xd1\xb0\xe9\x3d\x32\x40\x3b\xfc\xe1\xda\xea\x44\x63\x7b\x71\xbf\x63\x0b\x94\xdb\x58\xd0\x7c\x52\xc9\x47\x06\x92\x88\x4f\x03\x82\x70\x6f\xec\x17\x88\xb4\xa6\x82\x92\x40\xf3\xf5\x2b\x22\xcb\x08\x49\xdb\x2f\x62\x74\x51\xb5\x76\xee\x5e\x67\x3d\x4b\x6b\x47\x17\x4d\x15\xbf\xab\xcd\x66\x6f\x81\x71\x8e\xae\x37\xfb\x5b\x96\xa1\xd5\xa5\x76\xfe\x11\xb9\x40\xee\x66\x92\x64\xc2\x9d\xb8\x47\x46\x28\xff\xea\x24\x52\x87\xe0\xe2\xfe\xb5\x6b\x11\x53\xf3\xf5\x8f\x77\x91\xd1\x24\x5e\xc4\xe4\x36\x25\x5a\x2b\xb9\x01\x06\x15\x8b\x3d\xbd\x6c\xbe\xd8\xa2\xcc\xc3\x07\x4c\x5c\x12\x6c\xea\x61\x24\xc3\x9c\x5b\x6b\x9b\xf7\xc0\x09\x9d\x1d\xb2\xe1\xda\x63\x7b\x57\x63\xdb\xf2\xc3\x52\x48\x42\x01\x85\x3c\x8c\x42\xce\xde\xa0\xef\xa2\xbe\x8b\xdb\x29\xcc\xe2\xf2\xd7\x99\x53\xdb\x2d\x2f\x8e\xb0\x2c\x83\x38\xaf\xe8\xf8\x46\xba\x19\x8c\xbb\x72\xc3\xd9\xb6\x04\x6d\xd0\xc6\x0a\xa1\xcb\xf6\xe6\xc7\x03\xd7\x4a\x5b\x2a\xbb\xcb\xe7\x16\x6a\xa7\x80\x78\x56\x80\x8e\x63\xb2\x10\x74\xd3\x1a\xed\x84\xd7\x76\xd3\x32\xa6\x90\x16\xc2\x77\x60\xe7\xf1\xd9\x50\x51\xc9\x5c\xd9\x34\x32\x69\x22\x44\x23\xfc\x3e\x2d\x91\xb2\xad\xa4\xc3\xd0\xc2\x5b\xc4\xe0\x2a\x97\xc8\x14\xac\x4b\x54\xb0\xa8\x85\xdc\xab\x96\x98\xe7\x34\x2f\x70\x5b\x71\x49\xf5\x15\xbd\xd4\xcb\x20\x9b\x0f\x65\xc3\xcb\x79\x1e\xe5\xbe\xeb\xc9\x7d\xdc\x66\xb8\xd0\x2d\xb0\x22\xc8\x29\x24\xee\xd8\xa0\x3b\xf1\xf9\xbe\xa7\xe7\x32\x4a\xd8\x2d\x94\xee\xc8\xf1\x86\xd8\x22\xd1\x06\xd4\x49\xe6\x29\x73\x20\x7c\x0c\x42\x64\xcc\x43\xf9\x64\x60\x6b\x15\x3e\x8e\x6b\x35\xd4\x68\x1a\xc1\x16\x22\x3e\x8c\x46\x03\x97\x3a\x45\x11\x48\x7b\x6a\x25\x79\x33\xef\x7e\xeb\xd8\x73\x59\x3f\xb6\x02\x3f\x0a\x53\x12\x94\xc6\xb0\xff\x70\xad\x9c\xc8\x31\xd8\x4f\xfe\xa5\x75\xef\x4b\xe0\xd8\xe3\x9b\x75\x07\xc7\x30\x35\x44\x31\xe9\x94\xc3\x20\x26\x98\xdd\x5b\xd4\x8c\x76\x4e\x10\x6a\x8f\xff\x98\xa5\xf4\xba\x3f\x3c\x9a\x29\xdf\xc8\x0c\x23\xb6\xb3\x42\xff\x4e\x31\xda\xe3\x40\x50\xb2\x6e\xbc\x26\x76\xaf\xff\xd1\xbb\x9a\xba\x6b\xe5\x41\x9b\x87\x2b\x01\x73\x71\x22\x33\x70\x75\xb8\x00\x96\xb5\x3c\x8c\xfa\x3b\x6a\x87\x9f\x8f\x7e\xdf\x48\x0c\x16\xc7\x35\x4d\x16\x15\xc0\x02\xcb\xf3\x7d\x98\xe1\x91\x0d\x92\xe5\x79\xbb\x3e\x9e\x7c\xc1\x09\x16\x2b\xbd\x42\x58\x5a\x5d\x3d\x75\xcc\x87\xc0\xda\x3d\x2c\x0a\xb7\xe7\xbd\x1a\x4e\xf9\x03\x62\x3b\xa3\xfe\xd0\xf5\xbe\x7b\xc5\x1f\xb7\x53\xe3\x50\xb6\x7e\x6b\x0d\xfc\x2f\x00\x00\xff\xff\xdd\xf1\x74\x19\x11\x1e\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 7697, mode: os.FileMode(420), modTime: time.Unix(1537457262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
