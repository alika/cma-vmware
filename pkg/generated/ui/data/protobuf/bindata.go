// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x73\xdb\xb8\x11\x7f\xe7\x5f\xb1\xa3\x97\x26\x9d\x58\xb4\x9d\xbb\x36\x63\xd5\x9d\xba\x72\x7a\xd6\x24\xfe\x98\xc8\x97\xcc\x3d\x69\x20\x70\x45\xa2\x06\x01\x1e\x00\x4a\x51\x6f\xfc\xbf\x77\x16\x00\x45\x52\xa2\x92\x34\xbd\x87\xd3\x83\x2d\x61\x3f\xf8\xdb\xef\x05\xd3\x14\xa6\xba\xda\x1a\x91\x17\x0e\xce\x4f\xcf\xde\xc0\x9c\x95\xb6\x56\x39\xcc\xaf\xe7\x30\x95\xba\xce\xe0\x8e\x39\xb1\x46\x98\xea\xb2\xaa\x9d\x50\x39\x3c\x22\x2b\x81\xd5\xae\xd0\xc6\x8e\x93\x34\x4d\xd2\x14\xde\x0b\x8e\xca\x62\x06\xb5\xca\xd0\x80\x2b\x10\xae\x2a\xc6\x0b\x6c\x28\xaf\xe0\x23\x1a\x2b\xb4\x82\xf3\xf1\x29\xbc\x20\x86\x51\x24\x8d\x5e\x4e\x48\xc5\x56\xd7\x50\xb2\x2d\x28\xed\xa0\xb6\x08\xae\x10\x16\x56\x42\x22\xe0\x67\x8e\x95\x03\xa1\x80\xeb\xb2\x92\x82\x29\x8e\xb0\x11\xae\xf0\xcf\x89\x5a\x08\x09\xfc\x12\x75\xe8\xa5\x63\x42\x01\x03\xae\xab\x2d\xe8\x55\x97\x11\x98\x8b\xa0\xe9\x53\x38\x57\x5d\xa4\xe9\x66\xb3\x19\x33\x0f\x78\xac\x4d\x9e\xca\xc0\x6a\xd3\xf7\xb3\xe9\xdb\xbb\xf9\xdb\x93\xf3\xf1\x69\x14\xfa\x59\x49\xb4\x16\x0c\xfe\x5a\x0b\x83\x19\x2c\xb7\xc0\xaa\x4a\x0a\xce\x96\x12\x41\xb2\x0d\x68\x03\x2c\x37\x88\x19\x38\x4d\xa0\x37\x46\x90\xdf\x5e\x81\xd5\x2b\xb7\x61\x06\x49\x4d\x26\xac\x33\x62\x59\xbb\x9e\xcf\x1a\x88\xc2\xf6\x18\xb4\x02\xa6\x60\x74\x35\x87\xd9\x7c\x04\xff\xbc\x9a\xcf\xe6\xaf\x48\xc9\xa7\xd9\xe3\xcd\xfd\xcf\x8f\xf0\xe9\xea\xc3\x87\xab\xbb\xc7\xd9\xdb\x39\xdc\x7f\x80\xe9\xfd\xdd\xf5\xec\x71\x76\x7f\x37\x87\xfb\x7f\xc1\xd5\xdd\x2f\xf0\x6e\x76\x77\xfd\x0a\x50\xb8\x02\x0d\xe0\xe7\xca\x90\x05\xda\x80\x20\x6f\x62\xe6\x5d\x37\x47\xec\x41\x58\xe9\x00\xc9\x56\xc8\xc5\x4a\x70\x90\x4c\xe5\x35\xcb\x11\x72\xbd\x46\xa3\x28\x13\x2a\x34\xa5\xb0\x14\x55\x0b\x4c\x65\xa4\x46\x8a\x52\x38\xe6\xfc\xd1\x81\x5d\xe3\x84\x58\x6e\x05\x2f\x18\x4a\xf8\x88\x0a\xff\x23\x18\xfc\xad\x5c\x87\x6f\xff\xc8\x4b\x26\xe4\x98\xeb\xf2\xef\x49\x62\xb7\xca\xb1\xcf\x70\x09\xa3\xca\x68\xa7\x5f\x8f\x26\x49\x52\x31\xfe\x44\x08\x78\xc9\xd6\x25\x79\x72\x92\x24\xa2\xac\xb4\x71\x30\xca\xb5\xce\x25\xa6\xac\x12\x29\x53\x4a\x47\x0c\x63\x2f\x3c\x9a\xec\xd8\xfc\x6f\x7e\x92\xa3\x3a\xb1\x1b\x96\xe7\x68\x52\x5d\x79\xd6\x41\xb1\x24\x09\x54\x78\x91\x9b\x8a\x8f\x73\xe6\x70\xc3\xb6\x81\xcc\x17\x39\xaa\x45\xd4\x32\x8e\x5a\xc6\xba\x42\xc5\x2a\xb1\x3e\x6f\x28\x2f\xe1\x12\x7e\x4b\x00\x84\x5a\xe9\x0b\xff\x0d\xc0\x09\x27\xf1\x02\x46\x53\x59\x5b\x87\x06\x6e\x99\x62\x39\x1a\xf8\x78\xfb\x89\x19\x84\x1b\x94\x15\x1a\xb8\x7a\x98\x8d\x26\x9e\x7f\x1d\x6a\xe7\x02\x46\xeb\xd3\xf1\xd9\xf8\x34\x1e\x73\xad\x1c\xe3\xae\xd1\x4a\x1f\xc5\x4a\x52\xbc\xe7\xe3\xc8\x4f\x9f\xda\xc8\x0b\x18\x51\xda\xdb\x8b\x34\xcd\x85\x2b\xea\x25\xb9\x3c\xb5\xa1\xf2\x4f\xb8\xe2\x2e\xe5\x25\x3b\x09\x2e\xee\x88\x22\x85\xe7\x02\x46\x87\xf1\x8a\x4c\xcf\xf4\xcf\xff\xc1\xcf\x0e\x8d\x62\x72\x91\x69\x6e\x1b\x7c\xdf\xf9\xe8\x0c\x2d\x37\xc2\xbb\x97\x2c\xd3\x06\x81\x2d\x75\xed\xe0\xdb\xbc\xf7\x9c\x00\x58\x5e\x60\x89\xf6\x02\x6e\x1e\x1f\x1f\xe6\x93\xfd\x13\x3a\xe0\x5a\xd9\xda\x9f\x8c\x62\x3d\xd3\x03\xd3\x7f\x5b\xad\xbc\x9a\xca\xe8\xac\xe6\xc7\xe8\xcf\x93\x24\xb1\x68\xd6\x82\xe3\x0e\x56\x30\x9a\xca\x54\x48\x49\xf2\x6b\xe1\x1b\x20\x03\x1e\x38\x3c\xdd\x54\x1c\xa6\x06\x99\xc3\x46\xee\x45\xef\xe7\xad\xcd\x5f\x82\x41\x57\x1b\x65\xf7\x48\x1f\xb0\x92\xdb\x97\x9d\xe0\xef\x72\xd5\xd7\xc2\x98\x55\x62\x4c\xde\x6e\x32\xb0\xfd\x54\xb5\x83\x0b\x18\xf9\x6a\x59\x9f\xa5\x11\xcf\xa8\xc7\xb3\xd4\xd9\x96\x98\xfe\xdc\x1e\x3f\xc7\x30\xf7\x0c\x33\xe8\x8c\xc0\x75\xe8\x1e\xd6\x31\x57\x5b\xea\xb8\x3b\x2b\xa9\x33\x80\x70\x16\x9e\xea\x25\x72\xad\x56\x22\xf7\xcd\x85\x6b\xa5\x90\x3b\xb1\x16\x6e\xbb\xf3\xc4\x4f\xe8\x76\x6e\x68\xbf\xf7\x7d\xd0\x9e\x7f\xbf\x03\x72\xfc\xb2\x03\x06\x2d\xcd\x50\xa2\xc3\x81\xf8\x5d\x7b\xc2\x0e\x78\xef\x67\x1f\x7b\x8f\xf4\xfd\xf0\x23\x92\xff\xd9\x82\x5d\xac\x18\x48\x61\x1d\xc5\x29\x0a\xda\x81\x10\xbc\x27\x96\x17\xfd\xdf\xc7\x42\x41\xb4\xdf\x3b\x1c\x29\x61\xfc\xba\x45\xb5\x51\x4d\x83\xf4\x4d\xd6\x94\xbe\x34\x63\x93\x60\x95\x00\xaa\xcc\x4e\xb8\x7e\x42\x17\x97\x91\x59\x87\xfd\x45\x7b\x7c\x60\x64\x3c\xff\xdd\x0c\x8c\x70\x07\x6c\x7b\x4e\x92\x12\xad\xa5\x29\xb7\xdf\x06\xda\x86\x72\xc7\x4a\x6c\xb6\x9a\xa6\xca\x9c\x86\x25\xb6\x5d\x06\x33\xcf\x4c\x3b\x84\xca\xfd\x54\x80\x4b\x38\x9b\x34\x1a\x1e\x8b\xc8\x4b\x13\xba\x19\xf1\xde\x0f\x9e\xa3\xf7\xe8\x87\xc8\x37\xaf\x90\xb7\x42\x97\x70\x3e\x39\x8a\xd6\x3b\xaa\xd3\x00\x0b\xf4\xab\x87\x36\x7e\xbb\xeb\xc2\xde\x30\xdb\x05\x4d\xeb\x94\x5f\xfc\x68\xbf\x42\xeb\x92\xd0\x89\xb4\x04\xfd\x74\x60\x40\x86\x8e\x09\x69\xf7\x3d\x11\x45\xc1\xa0\xad\xb4\xb2\x18\x2c\x0a\xc4\x99\xc3\x72\xc7\xb8\x6f\x42\xaf\xe1\x7c\x8b\xb7\xa5\xd6\x4f\xb4\xbf\x55\xc3\xbe\x1e\x54\xbd\xe7\x9a\x99\xed\xe9\x15\x2a\xb4\xd1\xad\x75\x58\x1e\x1a\xdf\x35\xe5\xda\x5b\xff\x45\x83\xf6\x1b\x51\x37\x22\xcc\xd1\x96\xd9\x79\xf6\x9f\x6c\x80\xee\x34\x4d\x5c\x67\xf4\xf6\xab\x56\x1d\x76\xb3\xf6\x09\x53\x5d\xcb\xac\x67\xdb\x12\x1b\xc5\x31\x39\x87\xe2\x3a\xdf\x0d\x10\x12\xed\x66\x41\x04\x12\x27\xcc\xf1\xd8\xc5\x2e\x05\xbf\x1d\x27\xff\x5f\x31\x88\x42\xef\x07\xfb\x27\x56\x54\x05\xd9\x50\xba\x1d\x62\xee\x32\xb5\x60\xae\xf7\x72\xad\x6b\xbc\xc8\x7a\x18\x06\x32\x73\x20\x66\xe7\x93\xa1\xa8\xdb\x9e\xa3\x07\xa4\x77\x8e\x7e\x3d\x04\xba\x93\x7d\x7f\x6c\xe8\x03\xf2\x9d\x45\xc4\xe9\x66\x0f\xa1\xaf\x47\xd4\x75\xf8\x2f\xe1\x87\xe3\x5d\xaf\xd7\x28\x07\x4b\x6d\xd7\x3d\x4f\x40\x8a\x27\x84\xb0\xe7\x7e\xb5\x53\x37\xd3\x4d\xaf\xe0\x5d\xbd\x44\xa3\xd0\xa1\xf5\x4b\xd4\x46\x9b\x27\xa4\xae\x9a\xa1\x1d\xc3\x54\x2b\x67\xb4\x84\x4a\x32\xb5\x93\xb2\x40\x4b\x71\x86\x8e\x2e\x6b\xbb\x16\x8b\x70\xcb\x78\x21\x14\x12\xd8\x71\xcf\xda\x37\x76\xd1\x3c\xd0\x47\xa0\x8b\x24\xae\xd8\x5f\x99\x18\x81\xcb\xbb\x21\x58\x18\x42\xf1\x0d\xe3\x40\x58\xb8\xb9\x6a\x6b\xae\x10\x79\xb1\x60\x6b\x26\x24\x5b\x0a\x29\xdc\x36\x04\xa0\x03\x68\xc5\x96\x46\xf0\xd8\x8f\x6b\xbb\x37\xf6\xd0\x91\x83\x16\x91\xe9\x12\x7e\x9c\x24\x14\xbd\x28\xcb\x0d\x66\xa8\x9c\x60\xd2\x92\x82\x3a\xde\x7a\x39\x99\x42\xe2\xdd\x74\x68\x02\xde\xf1\x5a\x1b\x62\x52\x56\x5b\xba\xf0\x94\x41\xc5\x7c\x7e\x03\x8c\x73\xb4\xb6\x0b\x67\xc7\xb2\x1f\xdf\x42\x5b\xf7\x05\x39\x4f\xee\x16\x83\x9f\xde\x74\x9d\x1d\x90\x11\xca\xbd\x3e\x0f\xd4\x6e\xfe\x93\xc8\xd3\x1b\xbb\x4b\xa5\xe6\x7a\xcf\xbb\x29\x33\x86\x47\x9a\xbd\x94\x4d\x14\x09\xad\xe4\x16\x18\x94\x2c\x84\x66\xd5\xbc\x92\x41\x99\xf9\x37\x14\xb8\xa2\x7c\xea\x25\x4f\x54\xb7\xf0\xea\x3a\x69\xf4\x85\xaa\xe9\x24\x4b\xc7\xa1\x22\x4c\x23\x5b\x31\x8e\xc0\xa4\x56\x79\xfb\xc6\x27\xc6\xc4\xbb\xd2\x1f\x1e\xaf\xc2\x5a\x89\x5f\x6b\x94\x5b\x10\x3e\xd2\xab\x60\x0f\x5d\x17\xb3\x63\x6d\x27\x3c\xb2\x1b\xa2\x07\x23\xd6\xcc\x21\x3c\xe1\xd6\xfb\x8d\x49\x19\x2a\xae\x19\x15\x51\xd3\x84\xd2\x99\xee\x41\xcc\x35\x94\xe6\x4e\x70\xf5\x30\xf3\x81\xda\x35\x00\x57\xa0\x45\xe0\x4c\x51\xde\xc6\x72\xc2\x0c\x84\xca\xb0\x42\x45\x60\xe5\xb6\xe7\xd9\x2a\x80\x58\x10\x88\x6e\x2e\xc4\x84\xb4\xb0\x29\x04\x2f\xfc\x1b\x32\x23\x2c\x1e\xf4\xb2\xdd\x68\xea\x66\x70\xd9\x08\x37\x5d\x3e\x4d\x69\x54\x76\x1b\x8e\x47\x1e\xf6\xe7\xce\x30\x6d\x17\xe5\x30\x67\xd3\x14\xc2\x50\x25\xff\x34\xd2\xcd\xf4\x3e\x94\xdb\x1f\xc0\x2b\xd0\x15\x9a\xb0\x87\xd3\x46\x78\xff\xee\xc8\xee\xd3\xa8\x1a\xd8\xdf\xdb\x85\x3b\xa6\xbb\x63\x39\xe8\x10\x86\x5c\xd0\x3a\x58\x69\x2b\x9c\x36\xdb\x1d\x63\x74\x6d\x2e\x5c\x27\x55\xcf\x26\xfb\x8a\x0a\x66\x8b\x66\xda\x90\x26\xae\xcb\x52\xb8\x21\x2d\x81\xd2\xc6\xe7\x78\xc3\x73\x06\xd1\x9b\xca\x25\x32\x05\x9b\x02\x15\x2c\x6b\x21\x07\xd5\x12\xf3\x82\x86\x1a\xb6\x35\x1d\x55\x5f\xd3\xa1\x5e\x79\xd9\x6c\x5f\xd6\x1f\x2e\xb2\x20\xf7\x43\x4f\xee\x63\x1b\xe1\xdc\xb7\xbe\x2c\xcc\xc2\xb2\x12\x12\x0f\x30\xe8\x8e\x7f\x7e\xec\xe9\x99\x06\x09\xd3\xf6\xde\x5e\x37\x88\xc4\x4b\xf8\x4b\x4f\xea\x41\x32\x47\x91\x03\xe1\x82\x13\x02\x63\xe6\xd3\x27\x05\x53\x2b\xff\x7e\x31\xce\x96\x6e\x15\x34\x82\x97\xf0\xd7\xe6\xca\x94\xec\x99\xd4\x49\x0a\x4f\x1a\xc8\x95\x68\xcd\xa2\x7b\x5d\x6c\xb6\xb3\xe4\xbf\x01\x00\x00\xff\xff\xa5\xc0\x88\x83\x15\x17\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 5909, mode: os.FileMode(420), modTime: time.Unix(1537124569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
