// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x73\xdb\xb8\x11\x7f\xd7\x5f\xb1\xa3\x97\x3a\x9d\x44\x8c\x9d\xbb\xf6\xc6\xae\xdb\xba\x76\x9a\x68\x92\xd8\x99\xc8\x49\xe6\x9e\x34\x2b\x70\x45\xe2\x0c\x02\x28\x00\x4a\x51\x6f\xfc\xbf\x77\xf0\x41\x8a\xa4\x24\x3b\xcd\xe5\x66\x4e\x0f\x77\x26\xf7\x03\xfb\x8d\xdf\x32\x59\x06\x97\x4a\x6f\x0c\x2f\x4a\x07\x27\xcf\x8f\x7f\x82\x19\x56\xb6\x96\x05\xcc\xae\x66\x70\x29\x54\x9d\xc3\x35\x3a\xbe\x22\xb8\x54\x95\xae\x1d\x97\x05\xdc\x12\x56\x80\xb5\x2b\x95\xb1\x93\x51\x96\x8d\xb2\x0c\xde\x72\x46\xd2\x52\x0e\xb5\xcc\xc9\x80\x2b\x09\x2e\x34\xb2\x92\x1a\xca\x53\xf8\x44\xc6\x72\x25\xe1\x64\xf2\x1c\x8e\x3c\xc3\x38\x91\xc6\x4f\xce\xbc\x8a\x8d\xaa\xa1\xc2\x0d\x48\xe5\xa0\xb6\x04\xae\xe4\x16\x96\x5c\x10\xd0\x17\x46\xda\x01\x97\xc0\x54\xa5\x05\x47\xc9\x08\xd6\xdc\x95\xe1\x9c\xa4\xc5\x5b\x02\x3f\x27\x1d\x6a\xe1\x90\x4b\x40\x60\x4a\x6f\x40\x2d\xbb\x8c\x80\x2e\x19\xed\x7f\xa5\x73\xfa\x34\xcb\xd6\xeb\xf5\x04\x83\xc1\x13\x65\x8a\x4c\x44\x56\x9b\xbd\x9d\x5e\xbe\xbc\x9e\xbd\x7c\x76\x32\x79\x9e\x84\x3e\x4a\x41\xd6\x82\xa1\xff\xd4\xdc\x50\x0e\x8b\x0d\xa0\xd6\x82\x33\x5c\x08\x02\x81\x6b\x50\x06\xb0\x30\x44\x39\x38\xe5\x8d\x5e\x1b\xee\xe3\xf6\x14\xac\x5a\xba\x35\x1a\xf2\x6a\x72\x6e\x9d\xe1\x8b\xda\xf5\x62\xd6\x98\xc8\x6d\x8f\x41\x49\x40\x09\xe3\x8b\x19\x4c\x67\x63\xf8\xd7\xc5\x6c\x3a\x7b\xea\x95\x7c\x9e\xde\xbe\xbe\xf9\x78\x0b\x9f\x2f\x3e\x7c\xb8\xb8\xbe\x9d\xbe\x9c\xc1\xcd\x07\xb8\xbc\xb9\xbe\x9a\xde\x4e\x6f\xae\x67\x70\xf3\x6f\xb8\xb8\xfe\x19\xde\x4c\xaf\xaf\x9e\x02\x71\x57\x92\x01\xfa\xa2\x8d\xf7\x40\x19\xe0\x3e\x9a\x94\x87\xd0\xcd\x88\x7a\x26\x2c\x55\x34\xc9\x6a\x62\x7c\xc9\x19\x08\x94\x45\x8d\x05\x41\xa1\x56\x64\xa4\xaf\x04\x4d\xa6\xe2\xd6\x67\xd5\x02\xca\xdc\xab\x11\xbc\xe2\x0e\x5d\x78\xb5\xe3\xd7\x64\xe4\x59\xde\x71\x56\x22\x09\xf8\x44\x92\xfe\xcb\x11\xfe\x56\xad\xe2\x5f\xff\x2c\x2a\xe4\x62\xc2\x54\xf5\xf7\xd1\xc8\x6e\xa4\xc3\x2f\x70\x0e\x63\x6d\x94\x53\x2f\xc6\x67\xa3\x91\x46\x76\xe7\x2d\x60\x15\xae\x2a\x1f\xc9\xb3\xd1\x88\x57\x5a\x19\x07\xe3\x42\xa9\x42\x50\x86\x9a\x67\x28\xa5\x4a\x36\x4c\x82\xf0\xf8\xac\x65\x0b\xcf\xec\x59\x41\xf2\x99\x5d\x63\x51\x90\xc9\x94\x0e\xac\x7b\xc5\x46\xa3\x48\x85\xa3\xc2\x68\x36\x29\xd0\xd1\x1a\x37\x91\xcc\xe6\x05\xc9\x79\xd2\x32\x49\x5a\x26\x4a\x93\x44\xcd\x57\x27\x0d\xe5\x09\x9c\xc3\xaf\x23\x00\x2e\x97\xea\x34\xfc\x05\xe0\xb8\x13\x74\x0a\xe3\x4b\x51\x5b\x47\x06\xde\xa1\xc4\x82\x0c\x7c\x7a\xf7\x19\x0d\xc1\x6b\x12\x9a\x0c\x5c\xbc\x9f\x8e\xcf\x02\xff\x2a\xf6\xce\x29\x8c\x57\xcf\x27\xc7\x93\xe7\xe9\x35\x53\xd2\x21\x73\x8d\x56\xff\x93\x58\x79\xc5\x83\x18\x27\x7e\xff\xab\x8d\x38\x85\xb1\x2f\x7b\x7b\x9a\x65\x05\x77\x65\xbd\xf0\x21\xcf\x6c\xec\xfc\x67\x4c\x32\x97\xb1\x0a\x9f\xc5\x10\x77\x44\xc9\xa7\xe7\x14\xc6\xbb\xf9\x4a\x4c\xf7\xfe\x7f\xe1\x3f\xf4\xc5\x91\x91\x28\xe6\xb9\x62\xb6\xb1\xef\x1b\x8f\xce\xc9\x32\xc3\x43\x78\xbd\x67\xca\x10\xe0\x42\xd5\x0e\xbe\x2e\x7a\xf7\x23\x00\xcb\x4a\xaa\xc8\x9e\xc2\xeb\xdb\xdb\xf7\xb3\xb3\xe1\x1b\xff\x82\x29\x69\xeb\xf0\x66\x9c\xfa\xd9\x1f\x98\xfd\x62\x95\x0c\x6a\xb4\x51\x79\xcd\x0e\xd1\xef\xcf\x46\x23\x4b\x66\xc5\x19\xb5\x66\x45\xa7\x7d\x9b\x72\x21\xbc\xfc\x8a\x87\x01\x88\xc0\x22\x47\xa0\x1b\xcd\xe0\xd2\x10\x3a\x6a\xe4\x8e\x7a\x8f\xef\x6c\xf1\x04\x0c\xb9\xda\x48\x3b\x20\x7d\x20\x2d\x36\x4f\x3a\xc9\x6f\x6b\x35\xf4\xc2\x04\x35\x9f\xf8\x68\x37\x15\xb8\xfd\xe9\xda\xc1\x29\x8c\x43\xb7\xac\x8e\xb3\x64\xcf\xb8\xc7\xb3\x50\xf9\xc6\x33\xfd\x79\xfb\xfa\x3e\xa5\xb9\xe7\x98\x21\x67\x38\xad\xe2\xf4\xb0\x0e\x5d\x6d\xfd\xc4\x6d\xbd\xf4\x93\x01\xb8\xb3\x70\x57\x2f\x88\x29\xb9\xe4\x45\x18\x2e\x4c\x49\x49\xcc\xf1\x15\x77\x9b\x36\x12\xaf\xc8\xb5\x61\xd8\xfe\xdd\x8f\xc1\xf6\xfd\xb7\x07\xa0\xa0\x87\x03\xb0\xd7\xd3\x9c\x04\x39\xda\x93\xbf\xab\x40\x68\x0d\xef\x3d\xf6\x6d\xef\x91\xbe\xdd\xfc\x64\xc9\xff\xed\x41\x9b\x2b\x04\xc1\xad\xf3\x79\x4a\x82\x76\x4f\x0a\xde\x7a\x96\xa3\xfe\xf3\xa1\x54\x78\xda\xf7\x4e\x47\xe6\x6d\x7c\xdc\xa3\xda\xc8\x66\x40\x86\x21\x6b\xaa\xd0\x9a\x69\x48\xa0\xe6\xe0\x3b\xb3\x93\xae\x57\xe4\x12\x18\x99\x76\xd8\x8f\xb6\xaf\x77\x9c\x4c\xef\xbf\x9b\x83\xc9\xdc\x47\x7c\xc3\xfc\x97\xda\x3a\xc0\x07\x67\xc7\x45\x60\x4a\x59\xb8\x56\x39\x59\x38\xea\xbd\xeb\x3b\xd3\x23\xfd\x61\x06\x88\x4f\x61\xad\x0b\x83\x39\x25\x1b\x6c\x98\x11\x08\x05\x5f\x91\xdc\x71\xfa\x15\xb9\x8f\x91\x3d\x79\x32\x4c\xe4\x41\xea\x4e\x6a\x0f\x72\x7e\xf7\x6a\x4e\x0e\x3e\x96\x74\xe7\xa8\xd2\xce\x63\xc7\x26\x22\xbb\x49\xef\x1b\x0d\x47\xfd\xe7\xbe\x8f\x7d\xda\xf7\x4e\xf9\xae\x57\x8f\xa5\xfe\x7e\x34\xaa\xc8\x5a\x8f\xe3\x86\x17\xdd\xf6\xca\xbc\xc6\x8a\x1a\xdc\xde\xdc\x23\x4e\xc1\x82\xb6\xbd\x40\x79\x60\xf6\x28\x59\x16\x01\xf7\xc0\x39\x1c\x9f\x35\x1a\x6e\x4b\x6a\xa7\x82\x5a\xc2\x9b\x7a\x41\x46\x92\xa3\x58\x58\x6b\x65\xee\xc8\x80\xf4\xfd\x32\x81\x4b\x25\x9d\x51\x02\xb4\x40\xd9\x4a\x59\xf0\x60\x22\x27\xe7\x41\xae\x8c\x48\xdf\x9b\xf3\x0e\x59\xc9\x25\xcd\x34\xb1\x49\xd7\x82\xbb\x9f\xec\xbc\x39\xf0\x1c\x4e\x5a\x43\x3e\x97\x14\x70\xb7\x32\x61\xb5\xe9\x7a\xc4\x2d\xbc\xbe\x18\xc5\x80\x29\x01\x25\x2f\xca\x39\xae\x90\x0b\x5c\x70\xc1\xdd\x06\xce\xe1\x45\xcf\xa1\x25\x2e\x0c\x67\x29\x12\xb5\x1d\x84\x80\x9c\x77\x6b\x9e\x98\xce\xe1\x87\x56\x36\xd9\x6c\x61\x5d\x72\x56\x86\x35\xca\x70\x4b\x5d\x63\x62\x6d\x91\xf6\x19\xc9\x13\x94\xea\xb8\x1a\xb0\xa6\x51\x62\x1e\x62\x34\x0f\x81\x83\x73\xf8\xf1\x7b\x1e\x11\x93\xd2\xea\xfe\x4b\xc7\x75\x6e\xc1\x96\xaa\x16\xb9\x77\x1c\x61\x85\xa2\x26\x10\xfc\x8e\x80\xeb\xd3\x80\xec\x5d\x89\x0e\xd6\xbe\x83\x22\x07\x37\xae\x46\x01\xd3\xf7\x99\x27\x37\x9a\xde\xa3\xf5\x5b\xea\x02\xd9\x9d\x8f\x62\x03\x53\x81\xd5\xd6\xa9\x8a\x8c\x4d\xb1\x0d\xcb\x9c\x53\xde\x8d\xaa\x96\x1e\xec\x85\xc7\xa1\x33\x29\xf2\xa8\xf9\x9c\x64\xae\x15\x97\x0e\xce\xe1\xaf\x67\x07\x8b\x3c\xb4\x5f\x07\x19\x1e\xae\x8d\x35\xda\x6e\xad\xc7\xea\xe3\x71\xf1\x24\xeb\xb6\x55\xa3\xee\x76\xea\x3e\x27\x87\x5c\xd8\x61\x03\x25\x51\x30\x64\xb5\x92\x96\x82\x48\x33\xf8\x1c\x55\x2d\x63\x28\xdf\x8e\x0b\x3d\x24\xf6\x35\x4d\x2a\x94\xba\xf3\x8b\xad\xde\xdf\xa2\x7b\x55\x0f\x42\x33\xb5\xfd\x56\x91\x11\x5f\x6e\xac\xa3\x6a\xd7\xf9\xae\x2b\x57\xc1\xfb\x07\x1d\x1a\x22\xb4\x6e\x46\xd0\xf9\xbe\xec\x9c\xfd\x27\x1b\x4d\x77\xca\xaf\x22\xce\xa8\xcd\xa3\x5e\xed\xc2\xbc\xed\x09\x97\xa1\x8c\xbb\xbe\x2d\xa8\x51\x9c\x1a\x7a\x5f\x5e\x67\x2d\xb2\xf6\xa2\xdd\x2a\x48\x86\x24\xe8\x7d\x38\x77\x09\xbe\xc1\xaf\x87\xc9\xbf\x29\x07\x49\xe8\xed\x5e\x60\xd9\x74\xfd\x9e\x72\xdb\xb5\xb9\xcb\xb4\x35\xe6\x6a\x50\x6b\x5d\xe7\x79\xde\xb3\x61\x4f\x65\xee\xc9\x59\x77\x46\x6f\xb3\x6e\x7b\x81\xde\x23\xdd\x06\xfa\xc5\x3e\xa3\x3b\xd5\xf7\xc7\x36\x7d\x8f\x7c\x67\x43\x0b\xb3\x2f\x2c\x68\x0f\xcc\xbd\x0e\x7f\xb8\x6d\x3a\xd1\xd8\xde\xb7\x6f\x71\x41\x62\x1b\x0b\x3f\x9f\x64\xf2\x11\x41\x78\xe2\xe3\xf7\x78\x18\xf7\xfb\x05\x22\xad\xa9\xa0\x24\xd0\x7c\xb4\x8a\x80\x30\x22\xc9\xf6\x43\x96\xbf\x5f\x5a\x3b\x77\x6f\xa1\x9e\xa5\xb5\xf5\xf7\x43\x15\x3f\x87\xcd\x66\xaf\x01\x19\x23\x6b\xbb\x06\xb4\x2c\x43\xab\x4b\x65\xdd\x03\x72\x81\xdc\xcd\xa4\x97\x09\x57\xd9\x1e\x19\x2e\xdd\x8b\x93\x48\x1d\x62\x82\xbb\x9f\x6c\x0b\x74\x9a\x8f\x76\xac\x0b\x68\x26\xf1\xfe\xf4\x6e\xfb\x44\x2b\x29\x36\x80\x50\x61\xec\xe9\x65\xf3\xa1\x95\x44\x1e\xbe\x3b\xd2\xd2\xa3\x9d\x1e\xb4\xd1\x68\xed\x5a\x99\xbc\x87\x29\xfc\xd9\x21\x1b\xb6\x3d\xb6\x4a\x18\xa0\xdf\xf2\xc3\x52\x48\x42\x01\x3c\xdc\x8f\x42\xce\x5e\x91\xeb\x82\xb5\x8b\xf7\x53\x98\xc5\x9d\xad\x33\xa7\xb6\xcb\x59\x1c\x61\x59\x06\x71\x5e\xf9\xe3\x1b\xe9\x66\x30\xee\xca\x0d\x67\xdb\x12\x94\x26\x13\x2b\xc4\x5f\xb6\x37\x6f\x0e\x5c\x2b\x6d\xa9\xec\xee\x8c\x5b\x84\x9c\x02\xe2\xb0\x00\x15\xc7\x64\xc1\xfd\x4d\xab\x95\xe5\x4e\x99\x4d\xcb\x98\x42\x5a\x70\xd7\x41\x8b\xc7\x67\x43\x45\x25\xda\xb2\x69\x64\xaf\xc9\x03\x11\xee\xf6\x69\x89\x94\x6d\x25\x1d\x86\x16\xce\x10\x05\x57\x99\x20\x94\xb0\x2e\x49\xc2\xa2\xe6\x62\xaf\x5a\xcf\x3c\xf7\xf3\x82\xb6\x15\x97\x54\x5f\xf9\x97\x6a\x19\x64\xf3\xa1\x6c\x78\x39\xcf\xa3\xdc\x0f\x3d\xb9\x4f\xdb\x0c\x17\x2a\xc0\xd7\x04\xb1\x34\x17\xb4\x63\x83\xea\xc4\xe7\xc7\x9e\x9e\xcb\x28\x61\xb6\x08\xb8\x23\xc7\x1a\x62\x0b\x20\x1b\xe8\x27\xd0\xf9\xcc\x01\x77\x31\x08\x91\x31\x0f\xe5\x93\x81\xa9\x65\xf8\xa6\xad\xe4\x50\xa3\x6e\x04\x03\xb2\x83\xb0\xc4\x8c\x06\x2e\x75\x8a\x22\x90\xf6\xd4\x4a\xf2\x66\xde\xfd\x44\xb1\xe7\xb2\x7e\x68\x73\x7d\x10\xa6\x24\x04\x4c\x61\x6d\x61\x4a\x5a\x9e\x53\xb0\xdf\xfb\x97\xb6\xb4\xaf\x81\x63\x0f\x2f\xc4\x1d\x1c\x83\x72\x88\x62\xd2\x29\x87\x41\x4c\x30\xbb\xb7\x5f\x69\x65\x2d\xf7\x60\x3b\xfe\x1b\x94\x54\xeb\xfe\xf0\x68\xa6\x7c\x23\x33\x8c\xd8\xce\xe6\xfb\x3b\xc5\x68\x8f\x03\x41\xc9\xba\xf1\xda\xb3\x3b\xf5\x8f\xde\xd5\xd4\xdd\x06\x0f\xda\x3c\x5c\x09\xd0\xc6\x89\x8c\x60\xeb\x70\x01\x2c\x6b\x71\x18\xf5\x77\xd4\x0e\xbf\xfa\xfc\xbe\x91\x18\xec\x7b\x6b\x3f\x59\x64\x00\x0b\x98\xe7\xfb\x30\xc3\x03\x8b\x1f\xe6\x79\xbb\xf5\x9d\x7c\xc5\x09\x86\x2a\xb5\x22\x58\x1a\x55\x3d\x76\xcc\x87\xc0\xda\x3d\x2c\x0a\xb7\xe7\xbd\x18\x4e\xf9\x03\x62\x3b\xa3\xfe\xd0\xf5\xbe\x7b\xc5\x1f\xb7\x53\xe3\x50\xb6\x7e\x6b\x0d\xfc\x2f\x00\x00\xff\xff\xf2\x4b\x9b\x6b\xc8\x1d\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 7624, mode: os.FileMode(420), modTime: time.Unix(1537404603, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
