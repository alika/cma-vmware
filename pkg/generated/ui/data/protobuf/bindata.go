// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x73\xdb\xb8\x11\x7e\xe7\x5f\xb1\xa3\x97\x3a\x9d\x58\xb4\x7d\x77\xed\x8d\x55\x77\xaa\xca\x69\xa2\x49\x62\x7b\x22\x27\x99\x7b\xd2\x40\xe0\x8a\x44\x0d\x02\x38\x00\x94\xa2\x66\xfc\xbf\x77\xf0\x83\x12\x28\x51\x4e\xce\xcd\x43\xf5\x90\x48\xc0\xee\xf2\xdb\x6f\xb1\x1f\x96\xce\x73\x98\x48\xb5\xd1\xac\xac\x2c\x5c\x9c\x9d\xff\x0a\x33\x52\x9b\x46\x94\x30\xbb\x9e\xc1\x84\xcb\xa6\x80\x1b\x62\xd9\x0a\x61\x22\x6b\xd5\x58\x26\x4a\xb8\x47\x52\x03\x69\x6c\x25\xb5\x19\x66\x79\x9e\xe5\x39\xbc\x63\x14\x85\xc1\x02\x1a\x51\xa0\x06\x5b\x21\x8c\x15\xa1\x15\xb6\x3b\x2f\xe1\x13\x6a\xc3\xa4\x80\x8b\xe1\x19\x9c\x38\x83\x41\xdc\x1a\xbc\x18\xb9\x10\x1b\xd9\x40\x4d\x36\x20\xa4\x85\xc6\x20\xd8\x8a\x19\x58\x32\x8e\x80\x5f\x28\x2a\x0b\x4c\x00\x95\xb5\xe2\x8c\x08\x8a\xb0\x66\xb6\xf2\xcf\x89\x51\x1c\x12\xf8\x2d\xc6\x90\x0b\x4b\x98\x00\x02\x54\xaa\x0d\xc8\x65\x6a\x08\xc4\x46\xd0\xee\x53\x59\xab\x2e\xf3\x7c\xbd\x5e\x0f\x89\x07\x3c\x94\xba\xcc\x79\x30\x35\xf9\xbb\xe9\xe4\xd5\xcd\xec\xd5\xe9\xc5\xf0\x2c\x3a\x7d\x14\x1c\x8d\x01\x8d\xbf\x37\x4c\x63\x01\x8b\x0d\x10\xa5\x38\xa3\x64\xc1\x11\x38\x59\x83\xd4\x40\x4a\x8d\x58\x80\x95\x0e\xf4\x5a\x33\xc7\xdb\x4b\x30\x72\x69\xd7\x44\xa3\x0b\x53\x30\x63\x35\x5b\x34\xb6\xc3\x59\x0b\x91\x99\x8e\x81\x14\x40\x04\x0c\xc6\x33\x98\xce\x06\xf0\xcf\xf1\x6c\x3a\x7b\xe9\x82\x7c\x9e\xde\xbf\xb9\xfd\x78\x0f\x9f\xc7\x1f\x3e\x8c\x6f\xee\xa7\xaf\x66\x70\xfb\x01\x26\xb7\x37\xd7\xd3\xfb\xe9\xed\xcd\x0c\x6e\xff\x05\xe3\x9b\xdf\xe0\xed\xf4\xe6\xfa\x25\x20\xb3\x15\x6a\xc0\x2f\x4a\xbb\x0c\xa4\x06\xe6\xd8\xc4\xc2\x53\x37\x43\xec\x40\x58\xca\x00\xc9\x28\xa4\x6c\xc9\x28\x70\x22\xca\x86\x94\x08\xa5\x5c\xa1\x16\xee\x24\x28\xd4\x35\x33\xae\xaa\x06\x88\x28\x5c\x18\xce\x6a\x66\x89\xf5\x4b\x07\x79\x0d\x33\x67\xf2\x9e\xd1\x8a\x20\x87\x4f\x28\xf0\x3f\x8c\xc0\xdf\xea\x55\xf8\xf6\x8f\xb2\x26\x8c\x0f\xa9\xac\xff\x9e\x65\x66\x23\x2c\xf9\x02\x57\x30\x50\x5a\x5a\xf9\xd3\x60\x94\x65\x8a\xd0\x07\x87\x80\xd6\x64\x55\x3b\x26\x47\x59\xc6\x6a\x25\xb5\x85\x41\x29\x65\xc9\x31\x27\x8a\xe5\x44\x08\x19\x31\x0c\xbd\xf3\x60\xb4\x35\xf3\xbf\xe9\x69\x89\xe2\xd4\xac\x49\x59\xa2\xce\xa5\xf2\xa6\xbd\x6e\x59\x16\x76\xe1\xa4\xd4\x8a\x0e\x4b\x62\x71\x4d\x36\x61\x9b\xce\x4b\x14\xf3\x18\x65\x18\xa3\x0c\xa5\x42\x41\x14\x5b\x5d\xb4\x3b\x2f\xe0\x0a\xbe\x66\x00\x4c\x2c\xe5\xa5\xff\x06\x60\x99\xe5\x78\x09\x83\x09\x6f\x8c\x45\x0d\xef\x89\x20\x25\x6a\xf8\xf4\xfe\x33\xd1\x08\x6f\x90\x2b\xd4\x30\xbe\x9b\x0e\x46\xde\x7e\x15\x7a\xe7\x12\x06\xab\xb3\xe1\xf9\xf0\x2c\x2e\x53\x29\x2c\xa1\xb6\x8d\xea\x3e\x82\xd4\x2e\xf0\x1e\xc7\xd1\xde\x7d\x1a\xcd\x2f\x61\xe0\x8e\xbd\xb9\xcc\xf3\x92\x59\x4e\x16\x8e\xf2\xbc\xad\x42\x4e\x6b\x72\x1a\xe8\x4d\xdc\xd0\x95\xe6\x12\x06\x87\xb5\x8a\x46\x8f\xee\x3f\xff\x0f\x7e\xb1\xa8\x05\xe1\xf3\x42\x52\xd3\x62\x7b\xc6\x63\x0b\x34\x54\x33\x4f\xab\xcb\x48\x6a\x04\xb2\x90\x8d\x85\xef\x63\xed\x31\x03\x30\xb4\xc2\x1a\xcd\x25\xbc\xb9\xbf\xbf\x9b\x8d\xf6\x57\xdc\x02\x95\xc2\x34\x7e\x65\x10\xfb\xd8\x3d\x30\xff\xb7\x91\xc2\x87\x51\x5a\x16\x0d\x3d\xb6\xff\x38\xca\x32\x83\x7a\xc5\x28\x6e\x61\x85\x84\x5d\x7b\x32\xce\x9d\xff\x8a\x79\xe1\x23\x40\x83\x85\xdf\xd7\x8a\xc2\x44\x23\xb1\xd8\xfa\x9d\x74\x7e\xbe\x37\xe5\x0b\xd0\x68\x1b\x2d\xcc\xde\xd6\x07\x54\x7c\xf3\x22\x29\xfa\xf6\x8c\xfa\x1e\x18\x12\xc5\x86\x8e\xe9\xf6\xe4\xed\x3e\xaa\xb1\x70\x09\x03\xdf\x25\xab\xf3\x3c\xe2\x19\x74\x6c\x16\xb2\xd8\x38\xa3\x3f\xef\x96\x1f\x63\x89\x3b\x89\x69\xb4\x9a\xe1\x2a\xa8\x86\xb1\xc4\x36\xc6\x29\xed\x36\x4b\xa7\x08\xc0\xac\x81\x87\x66\x81\x54\x8a\x25\x2b\xbd\xa8\x50\x29\x04\x52\xcb\x56\xcc\x6e\xb6\x4c\xbc\x46\xbb\xa5\x61\xf7\xbd\xcb\xc1\x6e\xfd\xf9\x04\x94\xf8\x34\x01\xbd\x99\x16\xc8\xd1\x62\x4f\xfd\xae\xfd\xc6\x16\x78\xe7\x67\x17\x7b\x67\xeb\xf9\xf0\x23\x92\x3f\x9c\xc1\xb6\x56\x04\x38\x33\xd6\xd5\x29\x3a\x9a\x9e\x12\xbc\x73\x26\x27\xdd\xdf\xc7\x4a\xe1\xf6\x7e\x74\x39\x72\x87\xf1\xdb\x19\x35\x5a\xb4\xc2\xe8\xc5\x55\xd7\xbe\x35\xa3\x48\x10\xc5\xc0\x75\x66\x52\xae\xd7\x68\xe3\x10\x32\x4d\xcc\x4f\x76\xcb\x07\x49\xc6\xf5\x1f\x96\x60\x84\xdb\x93\xdb\x63\x96\xd5\x68\x8c\xbb\xdd\xf6\x65\x60\x27\x28\x37\xa4\xc6\x76\x9a\x69\xbb\xcc\x4a\x58\xe0\x4e\x65\xb0\xf0\xc6\x6e\x76\x10\xa5\xbf\x0d\xe0\x0a\xce\x47\x6d\x84\xfb\x2a\xda\xba\x9b\xb9\xbd\xda\x3d\x0f\xde\xa2\xf3\xe8\xbb\x68\x37\x53\x48\x77\x4e\x57\x70\x31\x3a\x8a\xd6\x13\x95\x08\x60\x85\x7e\xe4\x90\xda\x4f\x75\x29\xec\x35\x31\x29\x68\x37\x46\xf9\x81\xcf\xcd\x55\x68\x6c\x16\x94\x48\x72\x90\x0f\x07\x09\x14\x68\x09\xe3\x66\x9f\x89\xe8\x0a\x1a\x8d\x92\xc2\x60\xc8\x28\x6c\x4e\x2d\xd6\x5b\xc3\xfd\x14\x3a\x82\xf3\x3d\x6c\x73\x29\x1f\xdc\xdc\xa6\x9e\xe4\x7a\xa2\xb1\x40\x61\x19\xe1\xc6\xf9\xfd\xde\xa0\xde\x6c\xc7\xaa\x54\x4a\xc2\xfd\x95\x9a\xd3\xe4\xfb\x71\xb4\x7b\x6c\x4f\x4d\x07\x2a\x13\x41\x99\x37\xc6\x62\x7d\xc8\x67\xca\xce\xb5\x27\xf4\x49\x8e\xf6\xb5\x2d\x2d\x32\xb1\x6e\x60\x4d\x9e\xfd\x27\x13\xd8\xb0\xd2\x5d\xe2\x56\xcb\xcd\x1f\x21\x2a\x8a\xdc\xff\xc6\xd2\xa1\xe0\xee\x10\x4f\x64\xc3\x8b\x0e\x57\x0b\x6c\x81\xc6\xfe\xe9\x3b\x7a\xb3\xed\x1d\xe7\x5c\xd3\x83\x1a\x13\x8b\x97\xe0\xf1\x82\x45\x21\x4d\x90\x74\x33\x37\x48\x34\xad\xc0\x34\x8b\xed\xe4\x13\xae\xcc\x54\xab\x9f\x7b\x5a\xb6\x4a\xfd\xdc\x13\x13\x9d\xde\xf5\x5e\x20\xa8\x9c\x0c\x14\x7d\xfd\x76\x08\x2a\x35\xda\x81\xb9\xde\x6b\xb6\x94\x5a\x56\x74\x30\xf4\xb4\x66\xcf\x09\xbb\x18\xf5\x9d\x51\xd3\x29\x63\x8f\xf7\xb6\x8c\x3f\xf5\x81\x4e\x7a\xe5\xff\x1b\x7a\x8f\x7f\x32\x89\x59\xd9\x0e\x62\xee\xeb\x91\x70\x89\xfd\x15\xfc\x7c\x5c\xf6\x3b\x37\x45\xaf\x30\x6c\xaf\x8f\x53\xe0\xec\x01\x21\x0c\xfa\xdf\xbc\xaa\xda\xeb\x5d\x2e\xe1\x6d\xb3\x40\x2d\xd0\xa2\xe9\x20\xfc\xd5\xcc\x5b\x23\xcf\x5a\xea\x1d\xdf\x0b\xbe\x71\xcd\x05\x2b\x0f\x3d\xa0\x0a\xf4\x7d\xc7\x1d\xc6\x0c\xbc\x19\xef\xfa\xa4\x62\x65\x35\x27\x2b\xc2\x38\x59\x30\xce\xec\x26\x90\x96\x00\x5a\x92\x85\x66\x34\x5e\x22\x8d\xd9\xbb\xab\xd1\xae\xa5\x7e\x98\x47\xa3\x2b\xf8\x65\x94\x39\xc6\xa3\x2f\xed\x4a\x45\x13\x5f\xd1\xa9\x4b\xc5\xb9\xa7\x25\x6c\x8b\x74\x28\x15\x5f\x53\x38\x1f\x8d\x7b\x4f\xab\x43\xa0\xf1\xdd\x14\x08\xa5\x68\x3a\xfc\x36\xad\xc9\x7e\x65\xee\x88\x31\x6b\xa9\x8b\x27\x7c\x55\x6b\xf2\xe4\xc8\x90\xd0\x7f\x4c\x16\x17\x0d\xeb\xea\xf5\x77\xe9\xe0\xf9\x28\xb2\xf7\x1a\x6d\x7a\x90\x1c\xd8\x59\x18\x0c\x13\x91\xdc\x4d\x80\xf0\x35\xfa\x05\xb1\x74\xf9\xb5\xde\xad\xe6\x1f\xfa\xed\x0b\xeb\x12\xa4\x42\x1d\x06\x4c\x37\xea\xdc\xbe\x3d\x72\x03\x6f\x4b\x75\x38\x98\xee\x26\xc9\xc8\xb9\x25\x25\xc8\xa0\xd1\x25\x73\x73\x8e\x92\x86\x59\xa9\x37\x5b\xc3\xc8\x7c\xc9\x6c\xd2\x15\xe7\xa3\xfd\x40\x15\x31\x55\xab\x22\x2e\x12\x95\x75\xcd\x6c\x5f\x94\xb0\xb3\x13\xa4\xe3\x4d\x61\x35\xa2\x4f\x95\x72\x24\x02\xd6\x15\x0a\x5f\xb8\xde\xb0\xce\x78\xee\xc4\x0a\x77\x5a\x15\x43\x5f\xbb\x45\xb9\x0c\x45\xdf\xf7\xf5\x8b\xf3\x22\xf8\xfd\xdc\xf1\xfb\xb4\xab\x70\xe9\xdb\xa3\x08\x1a\x57\x2b\xc6\xf1\x00\x83\x4c\xf8\xf9\xa5\x13\x67\x12\x3c\xf4\xae\x3f\x13\x3f\xda\x6e\x5e\xc1\x5f\x3a\x5e\x77\x9c\x58\x57\x39\x60\x36\x90\x10\x0c\x43\x7b\xe4\xa0\x1b\xe1\xff\x60\x16\xf5\x27\x6d\x92\xd6\xf1\x0a\xfe\xda\xbe\x0b\x64\x7b\x29\x25\x87\x22\x9c\xfc\xc3\xb3\x12\xb3\x99\xa7\xef\x41\x6d\xdb\x65\xff\x0d\x00\x00\xff\xff\x93\xa0\xa1\xf4\xe6\x15\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 5606, mode: os.FileMode(420), modTime: time.Unix(1536723583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
